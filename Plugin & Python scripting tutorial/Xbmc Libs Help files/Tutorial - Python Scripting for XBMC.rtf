{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}{\f4\froman\fcharset0\fprq2{\*\panose 00000000000000000000}Times;}
{\f5\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Helvetica;}{\f6\fmodern\fcharset0\fprq1{\*\panose 00000000000000000000}Courier;}{\f7\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Geneva{\*\falt Arial};}
{\f8\froman\fcharset0\fprq2{\*\panose 00000000000000000000}Tms Rmn{\*\falt Times New Roman};}{\f9\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Helv{\*\falt Arial};}{\f10\froman\fcharset0\fprq2{\*\panose 00000000000000000000}MS Serif;}
{\f11\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}MS Sans Serif;}{\f12\froman\fcharset0\fprq2{\*\panose 00000000000000000000}New York;}{\f13\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}System;}
{\f14\fnil\fcharset2\fprq2{\*\panose 05000000000000000000}Wingdings;}{\f15\froman\fcharset0\fprq2{\*\panose 02040604050505020304}Century Schoolbook;}{\f16\fswiss\fcharset0\fprq2{\*\panose 020b0604030504040204}Tahoma;}
{\f17\fswiss\fcharset0\fprq2{\*\panose 020b0604030504040204}Verdana;}{\f18\fnil\fcharset2\fprq2{\*\panose 00000000000000000000}Marlett;}{\f19\fmodern\fcharset0\fprq1{\*\panose 020b0609040504020204}Lucida Console;}
{\f20\fswiss\fcharset0\fprq2{\*\panose 020b0602030504020204}Lucida Sans Unicode;}{\f21\fswiss\fcharset0\fprq2{\*\panose 020b0a04020102020204}Arial Black;}{\f22\fscript\fcharset0\fprq2{\*\panose 030f0702030302020204}Comic Sans MS;}
{\f23\fswiss\fcharset0\fprq2{\*\panose 020b0806030902050204}Impact;}{\f24\froman\fcharset0\fprq2{\*\panose 02040502050405020303}Georgia;}{\f25\fswiss\fcharset0\fprq2{\*\panose 020b0603020102020204}Franklin Gothic Medium;}
{\f26\froman\fcharset0\fprq2{\*\panose 02040502050505030304}Palatino Linotype;}{\f27\fswiss\fcharset0\fprq2{\*\panose 020b0603020202020204}Trebuchet MS;}{\f28\froman\fcharset2\fprq2{\*\panose 05030102010509060703}Webdings;}
{\f29\fscript\fcharset0\fprq2 Estrangelo Edessa;}{\f30\fnil\fcharset0\fprq2 Gautami;}{\f31\fnil\fcharset0\fprq2 Latha;}{\f32\fnil\fcharset0\fprq2 Mangal;}{\f33\fnil\fcharset0\fprq2 MV Boli;}{\f34\fnil\fcharset0\fprq2 Raavi;}
{\f35\fnil\fcharset0\fprq2 Shruti;}{\f36\fnil\fcharset0\fprq2 Tunga;}{\f37\froman\fcharset0\fprq2{\*\panose 010a0502050306030303}Sylfaen;}{\f38\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Microsoft Sans Serif;}
{\f39\fswiss\fcharset0\fprq2{\*\panose 020b0506020202030204}Arial Narrow;}{\f40\fswiss\fcharset128\fprq2{\*\panose 020b0604020202020204}Arial Unicode MS;}{\f41\fswiss\fcharset128\fprq2{\*\panose 020b0604020202020204}@Arial Unicode MS;}
{\f42\froman\fcharset129\fprq2{\*\panose 02030600000101010101}Batang;}{\f43\froman\fcharset129\fprq2{\*\panose 02030600000101010101}@Batang;}{\f44\froman\fcharset0\fprq2{\*\panose 02040602050305030304}Book Antiqua;}
{\f45\froman\fcharset0\fprq2{\*\panose 02050604050505020204}Bookman Old Style;}{\f46\froman\fcharset0\fprq2{\*\panose 02040604050505020304}Century;}{\f47\fswiss\fcharset0\fprq2{\*\panose 020b0502020202020204}Century Gothic;}
{\f48\froman\fcharset0\fprq2{\*\panose 02020404030301010803}Garamond;}{\f49\fswiss\fcharset0\fprq2{\*\panose 020b0706040902060204}Haettenschweiler;}{\f50\fmodern\fcharset128\fprq1{\*\panose 02020609040205080304}MS Mincho;}
{\f51\fmodern\fcharset128\fprq1{\*\panose 02020609040205080304}@MS Mincho;}{\f52\fnil\fcharset2\fprq2{\*\panose 05000000000000000000}MS Outlook;}{\f53\fscript\fcharset0\fprq2{\*\panose 03010101010201010101}Monotype Corsiva;}
{\f54\fnil\fcharset134\fprq2{\*\panose 02010600030101010101}SimSun;}{\f55\fnil\fcharset134\fprq2{\*\panose 02010600030101010101}@SimSun;}{\f56\froman\fcharset2\fprq2{\*\panose 05020102010507070707}Wingdings 2;}
{\f57\froman\fcharset2\fprq2{\*\panose 05040102010807070707}Wingdings 3;}{\f58\fnil\fcharset2\fprq2{\*\panose 01010601010101010101}Monotype Sorts;}{\f59\froman\fcharset0\fprq2{\*\panose 00050102010706020507}Map Symbols;}
{\f60\fswiss\fcharset0\fprq2{\*\panose 050b0604020202020204}Bookshelf Symbol 1;}{\f61\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Bookshelf Symbol 3;}{\f62\froman\fcharset2\fprq2{\*\panose 05050102010205020202}MT Extra;}
{\f63\fdecor\fcharset0\fprq2{\*\panose 04020906050602070202}Vineta BT;}{\f64\froman\fcharset2\fprq2{\*\panose 05050102010205020602}UniversalMath1 BT;}{\f65\fnil\fcharset2\fprq2{\*\panose 00000400000000000000}Technic;}
{\f66\fnil\fcharset2\fprq2{\*\panose 00000400000000000000}TechnicLite;}{\f67\fnil\fcharset2\fprq2{\*\panose 00000400000000000000}TechnicBold;}{\f68\fswiss\fcharset0\fprq2{\*\panose 020b0403020202020204}Swis721 Lt BT;}
{\f69\fdecor\fcharset0\fprq2{\*\panose 04020905030b03040203}Swis721 BlkOul BT;}{\f70\fswiss\fcharset0\fprq2{\*\panose 020b0904030502020204}Swis721 Blk BT;}{\f71\fswiss\fcharset0\fprq2{\*\panose 020b0504020202020204}Swis721 BT;}
{\f72\fswiss\fcharset0\fprq2{\*\panose 020b0505020202020204}Swis721 LtEx BT;}{\f73\fswiss\fcharset0\fprq2{\*\panose 020b0907040502030204}Swis721 BlkEx BT;}{\f74\fswiss\fcharset0\fprq2{\*\panose 020b0605020202020204}Swis721 Ex BT;}
{\f75\fswiss\fcharset0\fprq2{\*\panose 020b0406020202030204}Swis721 LtCn BT;}{\f76\fswiss\fcharset0\fprq2{\*\panose 020b0806030502040204}Swis721 BlkCn BT;}{\f77\fswiss\fcharset0\fprq2{\*\panose 020b0506020202030204}Swis721 Cn BT;}
{\f78\fdecor\fcharset0\fprq2{\*\panose 04020704030b03040203}Swis721 BdCnOul BT;}{\f79\fdecor\fcharset0\fprq2{\*\panose 04020705020b03040203}Swis721 BdOul BT;}{\f80\fnil\fcharset2\fprq2{\*\panose 00000400000000000000}SuperFrench;}
{\f81\fswiss\fcharset0\fprq2{\*\panose 020e0402020206020304}Stylus BT;}{\f82\fnil\fcharset2\fprq2{\*\panose 00000400000000000000}SansSerif;}{\f83\fnil\fcharset2\fprq2{\*\panose 00000400000000000000}Romantic;}
{\f84\fnil\fcharset2\fprq2{\*\panose 00000400000000000000}PanRoman;}{\f85\fmodern\fcharset0\fprq1{\*\panose 020b0609020202020204}Monospac821 BT;}{\f86\fmodern\fcharset0\fprq1{\*\panose 020b0609020202020204}ISOCTEUR;}
{\f87\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}ISOCPEUR;}{\f88\fnil\fcharset0\fprq2{\*\panose 00000400000000000000}GDT;}{\f89\fnil\fcharset2\fprq2{\*\panose 00000400000000000000}EuroRoman;}
{\f90\froman\fcharset0\fprq2{\*\panose 02020603060505020304}Dutch801 Rm BT;}{\f91\froman\fcharset0\fprq2{\*\panose 02020903060505020304}Dutch801 XBd BT;}{\f92\fnil\fcharset2\fprq2{\*\panose 00000400000000000000}CountryBlueprint;}
{\f93\fscript\fcharset0\fprq2{\*\panose 03030803040807090c04}CommercialScript BT;}{\f94\froman\fcharset2\fprq2{\*\panose 05020102010206080802}CommercialPi BT;}{\f95\fnil\fcharset2\fprq2{\*\panose 00000400000000000000}CityBlueprint;}
{\f96\fswiss\fcharset0\fprq2{\*\panose 020b0807020203060204}BankGothic Md BT;}{\f97\fswiss\fcharset0\fprq2{\*\panose 020b0607020203060204}BankGothic Lt BT;}{\f98\fmodern\fcharset2\fprq1{\*\panose 020b0609020202020204}r_control;}
{\f99\fmodern\fcharset0\fprq1{\*\panose 020b0609020202020204}r_ansi;}{\f100\fmodern\fcharset2\fprq1{\*\panose 020b0609020202020204}r_symbol;}{\f101\fdecor\fcharset0\fprq2{\*\panose 04040a05050d02020502}Beesknees ITC;}
{\f102\fscript\fcharset0\fprq2{\*\panose 03070402050302030203}Bradley Hand ITC;}{\f103\froman\fcharset0\fprq2{\*\panose 02040603050505030304}Calisto MT;}{\f104\fdecor\fcharset0\fprq2{\*\panose 04040404050702020202}Curlz MT;}
{\f105\froman\fcharset0\fprq2{\*\panose 02020904090505020303}Elephant;}{\f106\fswiss\fcharset0\fprq2{\*\panose 020b0907030504020204}Eras Bold ITC;}{\f107\fswiss\fcharset0\fprq2{\*\panose 020b0805030504020804}Eras Demi ITC;}
{\f108\fswiss\fcharset0\fprq2{\*\panose 020b0402030504020804}Eras Light ITC;}{\f109\fswiss\fcharset0\fprq2{\*\panose 020b0602030504020804}Eras Medium ITC;}{\f110\fswiss\fcharset0\fprq2{\*\panose 020b0a07030504020204}Eras Ultra ITC;}
{\f111\fdecor\fcharset0\fprq2{\*\panose 04040403040a02020202}Juice ITC;}{\f112\fdecor\fcharset0\fprq2{\*\panose 04040403030d02020704}Matisse ITC;}{\f113\froman\fcharset0\fprq2{\*\panose 02060603020205020403}Rockwell;}
{\f114\froman\fcharset0\fprq2{\*\panose 02060903040505020403}Rockwell Extra Bold;}{\f115\fdecor\fcharset0\fprq2{\*\panose 04040a07060a02020202}Snap ITC;}{\f116\fdecor\fcharset0\fprq2{\*\panose 04020404030d07020202}Tempus Sans ITC;}
{\f117\fscript\fcharset0\fprq2{\*\panose 03070502030502020203}Viner Hand ITC;}{\f118\froman\fcharset0\fprq2{\*\panose 020a0a07050505020404}Wide Latin;}{\f119\froman\fcharset0\fprq2{\*\panose 00000000000000000000}Bookman;}
{\f120\fdecor\fcharset2\fprq2{\*\panose 00000000000000000000}ZapfDingbats;}{\f121\froman\fcharset0\fprq2{\*\panose 00000000000000000000}Palatino;}{\f122\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}AvantGarde;}
{\f123\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Helvetica-Narrow;}{\f124\froman\fcharset0\fprq2{\*\panose 00000000000000000000}NewCenturySchlbk;}{\f125\froman\fcharset0\fprq2{\*\panose 00000000000000000000}ZapfChancery;}
{\f126\froman\fcharset177\fprq2{\*\panose 00000000000000000000}Times New Roman (Hebrew);}{\f127\froman\fcharset178\fprq2{\*\panose 00000000000000000000}Times New Roman (Arabic);}
{\f128\froman\fcharset163\fprq2{\*\panose 00000000000000000000}Times New Roman (Vietnamese);}{\f129\fswiss\fcharset177\fprq2{\*\panose 00000000000000000000}Arial (Hebrew);}{\f130\fswiss\fcharset178\fprq2{\*\panose 00000000000000000000}Arial (Arabic);}
{\f131\fswiss\fcharset163\fprq2{\*\panose 00000000000000000000}Arial (Vietnamese);}{\f132\froman\fcharset238\fprq2 Times New Roman CE;}{\f133\froman\fcharset204\fprq2 Times New Roman Cyr;}{\f135\froman\fcharset161\fprq2 Times New Roman Greek;}
{\f136\froman\fcharset162\fprq2 Times New Roman Tur;}{\f137\froman\fcharset186\fprq2 Times New Roman Baltic;}{\f138\fswiss\fcharset238\fprq2 Arial CE;}{\f139\fswiss\fcharset204\fprq2 Arial Cyr;}{\f141\fswiss\fcharset161\fprq2 Arial Greek;}
{\f142\fswiss\fcharset162\fprq2 Arial Tur;}{\f143\fswiss\fcharset186\fprq2 Arial Baltic;}{\f144\fmodern\fcharset238\fprq1 Courier New CE;}{\f145\fmodern\fcharset204\fprq1 Courier New Cyr;}{\f147\fmodern\fcharset161\fprq1 Courier New Greek;}
{\f148\fmodern\fcharset162\fprq1 Courier New Tur;}{\f149\fmodern\fcharset186\fprq1 Courier New Baltic;}{\f156\froman\fcharset238\fprq2 Times CE;}{\f157\froman\fcharset204\fprq2 Times Cyr;}{\f159\froman\fcharset161\fprq2 Times Greek;}
{\f160\froman\fcharset162\fprq2 Times Tur;}{\f161\froman\fcharset186\fprq2 Times Baltic;}{\f162\fswiss\fcharset238\fprq2 Helvetica CE;}{\f163\fswiss\fcharset204\fprq2 Helvetica Cyr;}{\f165\fswiss\fcharset161\fprq2 Helvetica Greek;}
{\f166\fswiss\fcharset162\fprq2 Helvetica Tur;}{\f167\fswiss\fcharset186\fprq2 Helvetica Baltic;}{\f222\froman\fcharset238\fprq2 Century Schoolbook CE;}{\f223\froman\fcharset204\fprq2 Century Schoolbook Cyr;}
{\f225\froman\fcharset161\fprq2 Century Schoolbook Greek;}{\f226\froman\fcharset162\fprq2 Century Schoolbook Tur;}{\f227\froman\fcharset186\fprq2 Century Schoolbook Baltic;}{\f228\fswiss\fcharset238\fprq2 Tahoma CE;}
{\f229\fswiss\fcharset204\fprq2 Tahoma Cyr;}{\f231\fswiss\fcharset161\fprq2 Tahoma Greek;}{\f232\fswiss\fcharset162\fprq2 Tahoma Tur;}{\f233\fswiss\fcharset186\fprq2 Tahoma Baltic;}{\f234\fswiss\fcharset238\fprq2 Verdana CE;}
{\f235\fswiss\fcharset204\fprq2 Verdana Cyr;}{\f237\fswiss\fcharset161\fprq2 Verdana Greek;}{\f238\fswiss\fcharset162\fprq2 Verdana Tur;}{\f239\fswiss\fcharset186\fprq2 Verdana Baltic;}{\f246\fmodern\fcharset238\fprq1 Lucida Console CE;}
{\f247\fmodern\fcharset204\fprq1 Lucida Console Cyr;}{\f249\fmodern\fcharset161\fprq1 Lucida Console Greek;}{\f250\fmodern\fcharset162\fprq1 Lucida Console Tur;}{\f252\fswiss\fcharset238\fprq2 Lucida Sans Unicode CE;}
{\f253\fswiss\fcharset204\fprq2 Lucida Sans Unicode Cyr;}{\f255\fswiss\fcharset161\fprq2 Lucida Sans Unicode Greek;}{\f256\fswiss\fcharset162\fprq2 Lucida Sans Unicode Tur;}{\f258\fswiss\fcharset238\fprq2 Arial Black CE;}
{\f259\fswiss\fcharset204\fprq2 Arial Black Cyr;}{\f261\fswiss\fcharset161\fprq2 Arial Black Greek;}{\f262\fswiss\fcharset162\fprq2 Arial Black Tur;}{\f263\fswiss\fcharset186\fprq2 Arial Black Baltic;}{\f264\fscript\fcharset238\fprq2 Comic Sans MS CE;}
{\f265\fscript\fcharset204\fprq2 Comic Sans MS Cyr;}{\f267\fscript\fcharset161\fprq2 Comic Sans MS Greek;}{\f268\fscript\fcharset162\fprq2 Comic Sans MS Tur;}{\f269\fscript\fcharset186\fprq2 Comic Sans MS Baltic;}
{\f270\fswiss\fcharset238\fprq2 Impact CE;}{\f271\fswiss\fcharset204\fprq2 Impact Cyr;}{\f273\fswiss\fcharset161\fprq2 Impact Greek;}{\f274\fswiss\fcharset162\fprq2 Impact Tur;}{\f275\fswiss\fcharset186\fprq2 Impact Baltic;}
{\f276\froman\fcharset238\fprq2 Georgia CE;}{\f277\froman\fcharset204\fprq2 Georgia Cyr;}{\f279\froman\fcharset161\fprq2 Georgia Greek;}{\f280\froman\fcharset162\fprq2 Georgia Tur;}{\f281\froman\fcharset186\fprq2 Georgia Baltic;}
{\f282\fswiss\fcharset238\fprq2 Franklin Gothic Medium CE;}{\f283\fswiss\fcharset204\fprq2 Franklin Gothic Medium Cyr;}{\f285\fswiss\fcharset161\fprq2 Franklin Gothic Medium Greek;}{\f286\fswiss\fcharset162\fprq2 Franklin Gothic Medium Tur;}
{\f287\fswiss\fcharset186\fprq2 Franklin Gothic Medium Baltic;}{\f288\froman\fcharset238\fprq2 Palatino Linotype CE;}{\f289\froman\fcharset204\fprq2 Palatino Linotype Cyr;}{\f291\froman\fcharset161\fprq2 Palatino Linotype Greek;}
{\f292\froman\fcharset162\fprq2 Palatino Linotype Tur;}{\f293\froman\fcharset186\fprq2 Palatino Linotype Baltic;}{\f294\fswiss\fcharset238\fprq2 Trebuchet MS CE;}{\f295\fswiss\fcharset204\fprq2 Trebuchet MS Cyr;}
{\f297\fswiss\fcharset161\fprq2 Trebuchet MS Greek;}{\f298\fswiss\fcharset162\fprq2 Trebuchet MS Tur;}{\f299\fswiss\fcharset186\fprq2 Trebuchet MS Baltic;}{\f354\froman\fcharset238\fprq2 Sylfaen CE;}{\f355\froman\fcharset204\fprq2 Sylfaen Cyr;}
{\f357\froman\fcharset161\fprq2 Sylfaen Greek;}{\f358\froman\fcharset162\fprq2 Sylfaen Tur;}{\f359\froman\fcharset186\fprq2 Sylfaen Baltic;}{\f360\fswiss\fcharset238\fprq2 Microsoft Sans Serif CE;}{\f361\fswiss\fcharset204\fprq2 Microsoft Sans Serif Cyr;}
{\f363\fswiss\fcharset161\fprq2 Microsoft Sans Serif Greek;}{\f364\fswiss\fcharset162\fprq2 Microsoft Sans Serif Tur;}{\f365\fswiss\fcharset186\fprq2 Microsoft Sans Serif Baltic;}{\f366\fswiss\fcharset238\fprq2 Arial Narrow CE;}
{\f367\fswiss\fcharset204\fprq2 Arial Narrow Cyr;}{\f369\fswiss\fcharset161\fprq2 Arial Narrow Greek;}{\f370\fswiss\fcharset162\fprq2 Arial Narrow Tur;}{\f371\fswiss\fcharset186\fprq2 Arial Narrow Baltic;}{\f374\fswiss\fcharset0\fprq2 Arial Unicode MS;}
{\f372\fswiss\fcharset238\fprq2 Arial Unicode MS CE;}{\f373\fswiss\fcharset204\fprq2 Arial Unicode MS Cyr;}{\f375\fswiss\fcharset161\fprq2 Arial Unicode MS Greek;}{\f376\fswiss\fcharset162\fprq2 Arial Unicode MS Tur;}
{\f377\fswiss\fcharset186\fprq2 Arial Unicode MS Baltic;}{\f380\fswiss\fcharset0\fprq2 @Arial Unicode MS;}{\f378\fswiss\fcharset238\fprq2 @Arial Unicode MS CE;}{\f379\fswiss\fcharset204\fprq2 @Arial Unicode MS Cyr;}
{\f381\fswiss\fcharset161\fprq2 @Arial Unicode MS Greek;}{\f382\fswiss\fcharset162\fprq2 @Arial Unicode MS Tur;}{\f383\fswiss\fcharset186\fprq2 @Arial Unicode MS Baltic;}{\f386\froman\fcharset0\fprq2 Batang;}{\f384\froman\fcharset238\fprq2 Batang CE;}
{\f385\froman\fcharset204\fprq2 Batang Cyr;}{\f387\froman\fcharset161\fprq2 Batang Greek;}{\f388\froman\fcharset162\fprq2 Batang Tur;}{\f389\froman\fcharset186\fprq2 Batang Baltic;}{\f392\froman\fcharset0\fprq2 @Batang;}
{\f390\froman\fcharset238\fprq2 @Batang CE;}{\f391\froman\fcharset204\fprq2 @Batang Cyr;}{\f393\froman\fcharset161\fprq2 @Batang Greek;}{\f394\froman\fcharset162\fprq2 @Batang Tur;}{\f395\froman\fcharset186\fprq2 @Batang Baltic;}
{\f396\froman\fcharset238\fprq2 Book Antiqua CE;}{\f397\froman\fcharset204\fprq2 Book Antiqua Cyr;}{\f399\froman\fcharset161\fprq2 Book Antiqua Greek;}{\f400\froman\fcharset162\fprq2 Book Antiqua Tur;}{\f401\froman\fcharset186\fprq2 Book Antiqua Baltic;}
{\f402\froman\fcharset238\fprq2 Bookman Old Style CE;}{\f403\froman\fcharset204\fprq2 Bookman Old Style Cyr;}{\f405\froman\fcharset161\fprq2 Bookman Old Style Greek;}{\f406\froman\fcharset162\fprq2 Bookman Old Style Tur;}
{\f407\froman\fcharset186\fprq2 Bookman Old Style Baltic;}{\f408\froman\fcharset238\fprq2 Century CE;}{\f409\froman\fcharset204\fprq2 Century Cyr;}{\f411\froman\fcharset161\fprq2 Century Greek;}{\f412\froman\fcharset162\fprq2 Century Tur;}
{\f413\froman\fcharset186\fprq2 Century Baltic;}{\f414\fswiss\fcharset238\fprq2 Century Gothic CE;}{\f415\fswiss\fcharset204\fprq2 Century Gothic Cyr;}{\f417\fswiss\fcharset161\fprq2 Century Gothic Greek;}
{\f418\fswiss\fcharset162\fprq2 Century Gothic Tur;}{\f419\fswiss\fcharset186\fprq2 Century Gothic Baltic;}{\f420\froman\fcharset238\fprq2 Garamond CE;}{\f421\froman\fcharset204\fprq2 Garamond Cyr;}{\f423\froman\fcharset161\fprq2 Garamond Greek;}
{\f424\froman\fcharset162\fprq2 Garamond Tur;}{\f425\froman\fcharset186\fprq2 Garamond Baltic;}{\f426\fswiss\fcharset238\fprq2 Haettenschweiler CE;}{\f427\fswiss\fcharset204\fprq2 Haettenschweiler Cyr;}
{\f429\fswiss\fcharset161\fprq2 Haettenschweiler Greek;}{\f430\fswiss\fcharset162\fprq2 Haettenschweiler Tur;}{\f431\fswiss\fcharset186\fprq2 Haettenschweiler Baltic;}{\f434\fmodern\fcharset0\fprq1 MS Mincho;}
{\f432\fmodern\fcharset238\fprq1 MS Mincho CE;}{\f433\fmodern\fcharset204\fprq1 MS Mincho Cyr;}{\f435\fmodern\fcharset161\fprq1 MS Mincho Greek;}{\f436\fmodern\fcharset162\fprq1 MS Mincho Tur;}{\f437\fmodern\fcharset186\fprq1 MS Mincho Baltic;}
{\f440\fmodern\fcharset0\fprq1 @MS Mincho;}{\f438\fmodern\fcharset238\fprq1 @MS Mincho CE;}{\f439\fmodern\fcharset204\fprq1 @MS Mincho Cyr;}{\f441\fmodern\fcharset161\fprq1 @MS Mincho Greek;}{\f442\fmodern\fcharset162\fprq1 @MS Mincho Tur;}
{\f443\fmodern\fcharset186\fprq1 @MS Mincho Baltic;}{\f450\fscript\fcharset238\fprq2 Monotype Corsiva CE;}{\f451\fscript\fcharset204\fprq2 Monotype Corsiva Cyr;}{\f453\fscript\fcharset161\fprq2 Monotype Corsiva Greek;}
{\f454\fscript\fcharset162\fprq2 Monotype Corsiva Tur;}{\f455\fscript\fcharset186\fprq2 Monotype Corsiva Baltic;}{\f458\fnil\fcharset0\fprq2 SimSun;}{\f464\fnil\fcharset0\fprq2 @SimSun;}{\f510\fdecor\fcharset238\fprq2 Vineta BT CE;}
{\f513\fdecor\fcharset161\fprq2 Vineta BT Greek;}{\f514\fdecor\fcharset162\fprq2 Vineta BT Tur;}{\f540\fswiss\fcharset238\fprq2 Swis721 Lt BT CE;}{\f543\fswiss\fcharset161\fprq2 Swis721 Lt BT Greek;}{\f544\fswiss\fcharset162\fprq2 Swis721 Lt BT Tur;}
{\f546\fdecor\fcharset238\fprq2 Swis721 BlkOul BT CE;}{\f549\fdecor\fcharset161\fprq2 Swis721 BlkOul BT Greek;}{\f550\fdecor\fcharset162\fprq2 Swis721 BlkOul BT Tur;}{\f552\fswiss\fcharset238\fprq2 Swis721 Blk BT CE;}
{\f555\fswiss\fcharset161\fprq2 Swis721 Blk BT Greek;}{\f556\fswiss\fcharset162\fprq2 Swis721 Blk BT Tur;}{\f558\fswiss\fcharset238\fprq2 Swis721 BT CE;}{\f561\fswiss\fcharset161\fprq2 Swis721 BT Greek;}{\f562\fswiss\fcharset162\fprq2 Swis721 BT Tur;}
{\f564\fswiss\fcharset238\fprq2 Swis721 LtEx BT CE;}{\f567\fswiss\fcharset161\fprq2 Swis721 LtEx BT Greek;}{\f568\fswiss\fcharset162\fprq2 Swis721 LtEx BT Tur;}{\f570\fswiss\fcharset238\fprq2 Swis721 BlkEx BT CE;}
{\f573\fswiss\fcharset161\fprq2 Swis721 BlkEx BT Greek;}{\f574\fswiss\fcharset162\fprq2 Swis721 BlkEx BT Tur;}{\f576\fswiss\fcharset238\fprq2 Swis721 Ex BT CE;}{\f579\fswiss\fcharset161\fprq2 Swis721 Ex BT Greek;}
{\f580\fswiss\fcharset162\fprq2 Swis721 Ex BT Tur;}{\f582\fswiss\fcharset238\fprq2 Swis721 LtCn BT CE;}{\f585\fswiss\fcharset161\fprq2 Swis721 LtCn BT Greek;}{\f586\fswiss\fcharset162\fprq2 Swis721 LtCn BT Tur;}
{\f588\fswiss\fcharset238\fprq2 Swis721 BlkCn BT CE;}{\f591\fswiss\fcharset161\fprq2 Swis721 BlkCn BT Greek;}{\f592\fswiss\fcharset162\fprq2 Swis721 BlkCn BT Tur;}{\f594\fswiss\fcharset238\fprq2 Swis721 Cn BT CE;}
{\f597\fswiss\fcharset161\fprq2 Swis721 Cn BT Greek;}{\f598\fswiss\fcharset162\fprq2 Swis721 Cn BT Tur;}{\f600\fdecor\fcharset238\fprq2 Swis721 BdCnOul BT CE;}{\f603\fdecor\fcharset161\fprq2 Swis721 BdCnOul BT Greek;}
{\f604\fdecor\fcharset162\fprq2 Swis721 BdCnOul BT Tur;}{\f606\fdecor\fcharset238\fprq2 Swis721 BdOul BT CE;}{\f609\fdecor\fcharset161\fprq2 Swis721 BdOul BT Greek;}{\f610\fdecor\fcharset162\fprq2 Swis721 BdOul BT Tur;}
{\f618\fswiss\fcharset238\fprq2 Stylus BT CE;}{\f621\fswiss\fcharset161\fprq2 Stylus BT Greek;}{\f622\fswiss\fcharset162\fprq2 Stylus BT Tur;}{\f642\fmodern\fcharset238\fprq1 Monospac821 BT CE;}{\f645\fmodern\fcharset161\fprq1 Monospac821 BT Greek;}
{\f646\fmodern\fcharset162\fprq1 Monospac821 BT Tur;}{\f648\fmodern\fcharset238\fprq1 ISOCTEUR CE;}{\f649\fmodern\fcharset204\fprq1 ISOCTEUR Cyr;}{\f651\fmodern\fcharset161\fprq1 ISOCTEUR Greek;}{\f652\fmodern\fcharset162\fprq1 ISOCTEUR Tur;}
{\f653\fmodern\fcharset186\fprq1 ISOCTEUR Baltic;}{\f654\fswiss\fcharset238\fprq2 ISOCPEUR CE;}{\f655\fswiss\fcharset204\fprq2 ISOCPEUR Cyr;}{\f657\fswiss\fcharset161\fprq2 ISOCPEUR Greek;}{\f658\fswiss\fcharset162\fprq2 ISOCPEUR Tur;}
{\f659\fswiss\fcharset186\fprq2 ISOCPEUR Baltic;}{\f672\froman\fcharset238\fprq2 Dutch801 Rm BT CE;}{\f675\froman\fcharset161\fprq2 Dutch801 Rm BT Greek;}{\f676\froman\fcharset162\fprq2 Dutch801 Rm BT Tur;}
{\f678\froman\fcharset238\fprq2 Dutch801 XBd BT CE;}{\f681\froman\fcharset161\fprq2 Dutch801 XBd BT Greek;}{\f682\froman\fcharset162\fprq2 Dutch801 XBd BT Tur;}{\f690\fscript\fcharset238\fprq2 CommercialScript BT CE;}
{\f693\fscript\fcharset161\fprq2 CommercialScript BT Greek;}{\f694\fscript\fcharset162\fprq2 CommercialScript BT Tur;}{\f708\fswiss\fcharset238\fprq2 BankGothic Md BT CE;}{\f711\fswiss\fcharset161\fprq2 BankGothic Md BT Greek;}
{\f712\fswiss\fcharset162\fprq2 BankGothic Md BT Tur;}{\f714\fswiss\fcharset238\fprq2 BankGothic Lt BT CE;}{\f717\fswiss\fcharset161\fprq2 BankGothic Lt BT Greek;}{\f718\fswiss\fcharset162\fprq2 BankGothic Lt BT Tur;}}{\colortbl;\red0\green0\blue0;
\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;
\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\sb60\sa60\widctlpar\adjustright \lang2057\cgrid \snext0 Normal;}{\s1\sa60\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \brdrl\brdrs\brdrw10\brsp80 
\brdrb\brdrs\brdrw10\brsp20 \brdrr\brdrs\brdrw10\brsp80 \outlinelevel0\adjustright \b\f1\lang1024\cgrid \sbasedon0 \snext0 heading 1;}{\*\cs10 \additive Default Paragraph Font;}{\s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid 
\sbasedon0 \snext15 code;}{\s16\qc\sa200\keepn\widctlpar\adjustright \b\f1\fs32\lang2057\cgrid \sbasedon0 \snext16 SectionHead;}{\s17\sb200\keepn\widctlpar\adjustright \b\f1\ul\lang2057\cgrid \sbasedon16 \snext17 LessonHead;}{
\s18\sb200\keepn\widctlpar\adjustright \b\f1\cf11\lang2057\cgrid \sbasedon17 \snext18 ParaHead;}{\s19\li187\sa60\widctlpar\adjustright \lang2057\cgrid \sbasedon0 \snext19 Body Text 2;}{\*\cs20 \additive \ul\cf2 \sbasedon10 Hyperlink;}{
\s21\sb60\sa60\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \lang2057\cgrid \sbasedon0 \snext21 header;}{\s22\sb60\sa60\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \lang2057\cgrid \sbasedon0 \snext22 footer;}{\*\cs23 \additive \sbasedon10 page number;}}
{\info{\title XBOX PYTHON TUTORIAL}{\author PC}{\operator AaronP}{\creatim\yr2004\mo6\dy5\hr14\min54}{\revtim\yr2004\mo7\dy21\hr10\min24}{\version87}{\edmins1213}{\nofpages34}{\nofwords12323}{\nofchars-32766}{\*\company Lowrance}{\nofcharsws0}{\vern113}}
\margl1080\margr1080 \widowctrl\ftnbj\aenddoc\hyphhotz425\noxlattoyen\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\hyphcaps0\viewkind1\viewscale100 \fet0\sectd \linex0\sectdefaultcl {\header \pard\plain \s21\qr\sb60\sa60\widctlpar
\tqc\tx4320\tqr\tx8640\adjustright \lang2057\cgrid {Alex and Alexpoet's XBMC-Python Scripting Tutorial
\par }}{\footer \pard\plain \s22\qc\sb60\sa60\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \lang2057\cgrid {\field{\*\fldinst {\cs23  PAGE }}{\fldrslt {\cs23\lang1024 2}}}{
\par }}{\*\pnseclvl1\pnucrm\pnqc\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnqc\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnqc\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnqc\pnstart1\pnindent720\pnhang
{\pntxta )}}{\*\pnseclvl5\pndec\pnqc\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnqc\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnqc\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8
\pnlcltr\pnqc\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnqc\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \s16\qc\sa200\keepn\widctlpar\adjustright \b\f1\fs32\lang2057\cgrid {\f22\lang1024 XBOX PYTHON TUTORIAL

\par }\pard\plain \sb60\sa60\widctlpar\adjustright \lang2057\cgrid {\lang1024 This document is released under the GPL license. 
\par Written by Alex (aka alx5962) and Alexpoet.
\par Version 2.0
\par Please notify us if you notice grammatical or typographical errors in this document. We strive to keep the tutorial readable and effective. However, if you have problems running the scripts contained in this document, reread the instructions or ask for he
lp on an appropriate web forum. Please do not email us directly for support. We don\rquote t have the time or resources\emdash that\rquote s why we made this tutorial. :)
\par Also, please note that we wrote this tutorial as an introductory lesson, with ease of understanding a major goal. Experienced developers may find this text too simplistic, but it's not written for them :)
\par Now, on to the instructions.
\par }\pard\plain \s17\sb200\keepn\widctlpar\adjustright \b\f1\ul\lang2057\cgrid {\lang1024 I. Introduction from Alx5962 (or, \ldblquote }{\i\lang1024 This}{\lang1024  Python is not a Snake\rdblquote )
\par }\pard\plain \sb60\sa60\widctlpar\adjustright \lang2057\cgrid {\lang1024 Welcome to the Python for XBMC Tutorial! This project began one day when I discovered XBMC (XBox Media Center) supports scripts written in Python. Darkie made the port, and I\rquote 
d like to thank him for his great work and support! (I harassed him with questions and feature suggestions and he was always nice enough to reply 
to the questions and to add the features.) Curious, I decided to try to use this scripting language to display some basic stuff.
\par Before I could begin writing for the XBox, I spent many hours learning the Python language (and, in the process, the snake bit me ;), and reading through all the documentation included in the Windows port. Once I\rquote 
d finished that, I started to code some very basic scripts. I learned XBMC Python through a lot of trial and error. Now I feel more comfortable coding for the XBox, and so I decided to share my experience.
\par }\pard\plain \s17\sb200\keepn\widctlpar\adjustright \b\f1\ul\lang2057\cgrid {\lang1024 II. Some Basic Rules (or, \ldblquote Even so\'85Be Careful of the Snake!\rdblquote )
\par }\pard\plain \sb60\sa60\widctlpar\adjustright \lang2057\cgrid {\lang1024 In order to script for the XBox, you\rquote ll obviously need Python installed with XBMC. Most XBMC releases include a python.rar file containing the necessary scrip
ts. (Some full-scale releases come with Python already included in the main installation.)
\par So unrar the Python file if you need to, and you'll have two folders: \ldblquote python\rdblquote  and \ldblquote scripts.\rdblquote  Place both of these in XBMC\rquote s root directory.
\par Note that features are always being added, so we really advise you to have the last version of XBMC }{\i\lang1024 and}{\lang1024  of Python, otherwise scripts written using newer versions may not work with your installation.
\par To run Python scripts on your XBox, use the script launcher, which is based in different locations in XBMC depending on your skin. In Project Mayhem, it can be found under \ldblquote My Files.\rdblquote  So go to \ldblquote My Files,\rdblquote 
 then scroll down to \ldblquote scripts\rdblquote  and push \ldblquote A\rdblquote  (or \ldblquote Select\rdblquote  on the IR Remote). Now it will show you a list of all the Python scripts\emdash as well as any subfolders\emdash in your \ldblquote 
scripts\rdblquote  directory. Select a Python script and hit \ldblquote A\rdblquote  to run it.
\par (You\rquote ll notice that whenever a script is activated, even if it has no GUI window, the word \ldblquote running\rdblquote  is added next its filename in the script launcher. This will disappear when the script comes to an end.)
\par Debug information for Python scripts can be found at the script launcher screen by pressing the white button on your controller. Any }{\b\lang1024 print}{\b\i\lang1024  }{\lang1024 statements in the script will print out to this debug screen, as will 
any errors.
\par Note that you may need internet access to run some scripts, so be sure to configure your installation of XBMC (instructions can be found in the XBMC documentation) and don't forget to set up your nameserver (aka DNS) to resolve domain names. Of
 course, if you can\rquote t get internet access to work, you can still run any Python scripts that aren\rquote t internet-dependent.
\par }\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 \clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr
\brdrs\brdrw10 \cltxlrtb \cellx9514\pard\plain \s18\sb200\keepn\widctlpar\intbl\adjustright \b\f1\cf11\lang2057\cgrid {\cf0\lang1024 Sidenote \endash  Scriptionary: Script Management Utility
\par }\pard\plain \sb60\sa60\widctlpar\intbl\adjustright \lang2057\cgrid {\lang1024 I've developed a small utility script as an alternative to XBMC's script launcher. It
's called Scriptionary, and is available on my website or at the downloads page linked at the end of this document.
\par Scriptionary is designed to be a simple interface to provide quick access to the scripts you run often, without cluttering the screen with scripts you }{\i\lang1024 don't}{\lang1024 
 use. It's a product still in development, and at the time I'm writing this tutorial, Scriptionary still certainly has its bugs. But you might consider downloading it and trying it out. This utility just might save you some time and hassle
, and make your script development a little bit easier.
\par }{Alexpoet.\cell }\pard \widctlpar\intbl\adjustright {\row }\pard\plain \s17\sb200\keepn\widctlpar\adjustright \b\f1\ul\lang2057\cgrid {\lang1024 III. Peculiarities of Python (or, \ldblquote Pay Attention to the Snake\rquote s Behaviour\rdblquote )
\par }\pard\plain \sb60\sa60\widctlpar\adjustright \lang2057\cgrid {\b\lang1024 Python coding is based on indentation.}{\lang1024  In many languages, levels of indentation are used as a convention for the 
sake of readability. In Python, indentation actually describes blocks. So you won\rquote t use curly braces\emdash \rdblquote \{\ldblquote  and \ldblquote \}\rdblquote \emdash 
to declare the start and end of a function, class, or if statement. Instead, you\rquote ll declare a function:
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\lang1024 def myFunction(params):
\par }\pard\plain \sb60\sa60\widctlpar\adjustright \lang2057\cgrid {\lang1024 and follow it with code indented by one level:
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\lang1024 def myFunction(params):
\par \tab variable = False
\par \tab doThis(params)
\par \tab if variable == True:
\par \tab \tab doThat(params)
\par }\pard\plain \sb60\sa60\widctlpar\adjustright \lang2057\cgrid {\lang1024 You\rquote ll notice a second level of indentation following the if statement. In Python, indentation describes all blocks and sub-blocks.
\par }{\b\lang1024 Everything is an object.}{\lang1024  This aspect of the language is very nice sometimes, but it can be tricky for beginners! Just remember that, in Python, everything is an object. As you get further into scripting, you\rquote 
ll learn the full implications of this fact.
\par }{\b\lang1024 When assigned, a variable is considered local unless you declare it global.}{\lang1024  This rule comes up often, although it\rquote s not covered within the scope of this tutorial. Still, it\rquote 
s a helpful fact to know, especially when you start reading through other people\rquote s scripts.
\par The goal of this document is not to teach Python, though, but to teach you how to write Python for the XBox. So instead of going into further detail here, we recommend that you read the fine documentation available on www.python.org.
\par }\pard\plain \s17\sb200\keepn\widctlpar\adjustright \b\f1\ul\lang2057\cgrid {\lang1024 IV. Tutorial: Writing XBMC Python Scripts (or, \ldblquote The Real Work Begins\rdblquote )
\par }\pard\plain \sb60\sa60\widctlpar\adjustright \lang2057\cgrid {\lang1024 There are two special libraries for Python scripts only available in XBMC: xbmc and xbmcgui. They are dedicated to the user interface, keypad management, and fundamental interaction
 with XBMC itself. Artificial emulators of these libraries are under development, to allow you to test xbmc- and xbmcgui-dependent code on a PC. For more details, visit the XBMC Python forum and look for the thread \ldblquote 
Dev Tool: XBMC Emulator Scripts,\rdblquote  or visit Alexpoet\rquote s website (the address is at the end of this document).
\par In the course of this tutorial, we will only address scripts that use a graphical interface, as our primary purpose is to introduce the use of the xbmc and xbmcgui libraries. Console scrip
ts that work without these libraries are outside the scope of this document.
\par Throughout this text, Python code will be coloured in }{\cf2\lang1024 blue}{\lang1024 . Tutorial segment headings are shown in }{\b\cf11\lang1024 boldface green}{\lang1024 .
\par }\pard\plain \s18\sb200\keepn\widctlpar\adjustright \b\f1\cf11\lang2057\cgrid {\lang1024 Creating a Window
\par }\pard\plain \sb60\sa60\widctlpar\adjustright \lang2057\cgrid {\lang1024 The first step in writing a script for XBMC is to import the xbmc libraries:
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\lang1024 import xbmc, xbmcgui
\par }\pard\plain \sb60\sa60\widctlpar\adjustright \lang2057\cgrid {\lang1024 After that, we need to create a class (defined by the keyword "}{\b\lang1024 class}{\lang1024 ") that will include some of its own functions (defined by the keyword \ldblquote }{
\b\lang1024 def}{\lang1024 \rdblquote )
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\lang1024 class MyClass(xbmcgui.Window):
\par \tab print "hello world"
\par }\pard\plain \sb60\sa60\widctlpar\adjustright \lang2057\cgrid {\lang1024 MyClass is now set up to act like a Window (as described in the xbmcgui library). Once we\rquote 
ve defined the class, we need to initialize the class object (that is, create an instance of it) and then run the library\rquote s function }{doModal}{\cf1\lang1024 
, which causes the graphical window to continue displaying on the screen until we close it.
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\lang1024 mydisplay = MyClass()
\par mydisplay.doModal()
\par del mydisplay 
\par }\pard\plain \sb60\sa60\widctlpar\adjustright \lang2057\cgrid {\lang1024 Note: The final command \ldblquote }{\b del}{\lang1024 \rdblquote  is here for \ldblquote garbage collection\rdblquote ; it keeps our code clean by de
leting the class instance that we created.
\par Now, put all of this code, in order, into a script, and call it \ldblquote display.py\rdblquote . }{\b\lang1024 It should look like this:}{\lang1024 
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\lang1024 import xbmc, xbmcgui
\par 
\par class MyClass(xbmcgui.Window):
\par \tab print "hello world"
\par 
\par mydisplay = MyClass()
\par mydisplay.doModal()
\par del mydisplay 
\par }\pard\plain \sb60\sa60\widctlpar\adjustright \lang2057\cgrid {\lang1024 (All we did was combine the lines above, to make it easier to read.)
\par Now, to test your script, you need to copy it to your XBox. We recommend you go to your XBMC installation folder, then find the \ldblquote scripts\rdblquote  subfolder, and create a folder called \ldblquote Tutorial\rdblquote 
 within scripts. Now copy your new display.py script to that folder, as well as the background.gif image that should have come attached to this document. (If you don\rquote t have it, don\rquote t worry. It\rquote s a very simple 720 x 480 ima
ge and you can easily make your own. We\rquote ll use it later in this text.)
\par Once you\rquote ve got the script in place, you can run it through XBMC, using the script launcher (as described above). When you run it, all you'll see is an empty window, which is the same window you just created with your script! There\rquote 
s one problem, though. Since there's no code to exit the MyClass class, you'll have to reset the XBox to escape the script.
\par Also notice that the }{\b\lang1024 print}{\lang1024  function only displays output in debug mode, not anywhere on the main GUI screen. To access debug mode, once you\rquote ve exited the script press the white button, and you\rquote 
ll see a list of all the script output generated since you last booted your XBox. Press the white button again to clear this screen, or \ldblquote Back\rdblquote  to return to the scripts menu.
\par }\pard\plain \s18\sb200\keepn\widctlpar\adjustright \b\f1\cf11\lang2057\cgrid {\lang1024 Responding to the Controller/Keypad (and Creating an \ldblquote Exit\rdblquote  Option)}{\cf1\lang1024 
\par }\pard\plain \sb60\sa60\widctlpar\adjustright \lang2057\cgrid {\lang1024 Now that we\rquote ve got a working window taking over our screen, we need to implement a way to exit the display. We\rquote ll use the controller/keypad for that, by writing s
ome code that will capture the press of the button on the keypad and respond to it.
\par It's pretty simple. Open up "display.py" and remove the third line (}{\f1\fs20\cf2\lang1024 print "hello world"}{\lang1024 ). We're going to replace it with a function that captures controller actions.
\par First, add this before you create the class:
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\lang1024 #get actioncodes from keymap.xml
\par ACTION_PREVIOUS_MENU = 10
\par }\pard\plain \sb60\sa60\widctlpar\adjustright \lang2057\cgrid {\lang1024 The first line is a comment\endash comments in Python are preceded by "#"\endash which means it acts as a note to the programmer, but doesn't actually do anything when the 
script is run. This one is telling you }{\i\lang1024 where}{ we found out that the number 10 is what you get when someone pushes the }{\lang1024 "}{Back}{\lang1024 "}{ button on the XBox controller.
\par Now you have to write a function that will }{\i use}{ this information. Inside the MyClass block (where the print statement used to be), add this function:
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\lang1024 \tab def onAction(self, action):
\par \tab \tab if action == ACTION_PREVIOUS_MENU:
\par \tab \tab \tab self.close()
\par }\pard\plain \sb60\sa60\widctlpar\adjustright \lang2057\cgrid {Once you've added that, you've got a script that can respond to controller actions. You've also now written an }{\lang1024 "}{Exit}{\lang1024 "}{ option i
nto your script, so users can exit it. 
\par }{\b\lang1024 Here\rquote s what the full code should look like:
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\lang1024 import xbmc, xbmcgui
\par 
\par #get actioncodes from keymap.xml
\par ACTION_PREVIOUS_MENU = 10
\par 
\par class MyClass(xbmcgui.Window):
\par \tab def onAction(self, action):
\par \tab \tab if action == ACTION_PREVIOUS_MENU:
\par \tab \tab \tab self.close()
\par 
\par mydisplay = MyClass()
\par mydisplay.doModal()
\par del mydisplay 
\par }\pard\plain \sb60\sa60\widctlpar\adjustright \lang2057\cgrid {\lang1024 You can see we've only really added four lines to the script, but now it's interactive! Oh, sure, it doesn't do much, but it's a beginning. Now, ea
ch time we push the "Back" button, we will exit the class and (therefore) the script.
\par Now's a good time to point out how Python's use of indentation makes these scripts so readable. The flow of the script is clear, and it's easy to find where each logical block starts and ends.
\par Also, note again that the keyword }{\b def}{\lang1024  defines a function. Here we have a special instance, though, because }{onAction}{\lang1024  is a function call built into the XBMC library. In any script, XBMC calls the }{onAction}{\lang1024 
 function whenever it receives any keypad-related actions.
\par Also notice what we use }{onAction}{\lang1024  for: to call the command }{self.close().}{\lang1024  This is another function built into xbmc that will close the window and so the class, ending the }{doModal()}{\lang1024  loop.
\par }\pard\plain \s18\sb200\keepn\widctlpar\adjustright \b\f1\cf11\lang2057\cgrid {\lang1024 Control Objects - Adding a Text Label
\par }\pard\plain \sb60\sa60\widctlpar\adjustright \lang2057\cgrid {\lang1024 Now, a GUI is obviously about more than input. We'll need some output, too. So it's time for us to learn how to display text on the window we've created. 
\par To do that, we'll use the ControlLabel function. Contro}{l}{\lang1024 Label has some properties including position, font
 colour and transparency, and font size. The following three lines act as a single "block" to create and display a line of text on the window:
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\lang1024 self.strAction = xbmcgui.ControlLabel(300, 200, 200, 200, "", "font14", "0xFFFFFF00")
\par self.addControl(self.strAction)
\par self.strAction.setLabel("BACK to quit")
\par }\pard\plain \sb60\sa60\widctlpar\adjustright \lang2057\cgrid {\lang1024 
There is a reason we have to write three lines just to create a single line of text on the screen, but that will become more obvious as we get further into the tutorial. For now, think of it like this: First we 
tell the program what the Control is going to look like (with the xbmcgui.ControlLabel function, and all of its parameters), then we tell the program to }{\i\lang1024 make}{\lang1024 
 that control (with the addControl function), and then we tell the Control what to do (in this case, display the line "BACK to quit").
\par So, when we start by describing the control, we pass it a bunch of numbers, and a couple of strings. These define the Control object's position, size, and unique characteristics. In this example, we have:
\par 300 is the control's X position on the screen\line 520 is the control's Y position on the screen\line 200, 200 is supposed to be size of the element (but it seems to not work with text)\line 
"" is an empty string that can be used to set an initial label text, but we are setting the label later.\line "font14" is the font used for this control's text, (the fonts available vary by skin)
\par The final element is "0xFFFFFF00" \endash  this value may look familiar to you. It represents the colour value and transparency of the label's font, coded in hexadecim
al (from 00 to FF). So read this as 0xTTRRGGBB where T is the transparency value, R is red, G is green and as you guessed B is blue. When we add text to the label, it will show up on the screen in the color defined by this value.
\par Now we have a working scri
pt that could include a label telling us how to use its controls (well...just one control, really, but who's counting?). Instead, let's build a slightly different label and associate it with the A button of the keypad, for more practice. First, add this l
ine near the top of your script:
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\lang1024 ACTION_SELECT_ITEM = 7
\par }\pard\plain \sb60\sa60\widctlpar\adjustright \lang2057\cgrid {\lang1024 We used a similar line earlier to identify when the user pushed the "Back" button\endash that was 10\endash and now we're using this one to get the "A" button, which is a value of 7.

\par Now, as you remember from the la
st segment, the way we use these values is in the special function onAction, by telling the script how to respond when XBMC tells us the "A" button was pushed. So we add this "if" statement to the onAction function we already have:
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\lang1024 \tab \tab if action == ACTION_SELECT_ITEM:
\par }{\expnd0\expndtw-4\lang1024 \tab \tab \tab self.strAction = xbmcgui.ControlLabel(300, 200, 200, 200, }{\lang1024 ""}{\expnd0\expndtw-4\lang1024 , }{\lang1024 "}{\expnd0\expndtw-4\lang1024 font14}{\lang1024 "}{\expnd0\expndtw-4\lang1024 , }{\lang1024 "}{
\expnd0\expndtw-4\lang1024 0xFF00FF00}{\lang1024 "}{\expnd0\expndtw-4\lang1024 )
\par }{\lang1024 \tab \tab \tab self.addControl(self.strAction)
\par \tab \tab \tab self.strAction.setLabel("Hello world")
\par }\pard\plain \sb60\sa60\widctlpar\adjustright \lang2057\cgrid {\lang1024 Once you add these lines to the script, it will show your new label whenever the "A" button is pressed. }{\b\lang1024 The whole script should look like this:}{\lang1024 
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\lang1024 import xbmc, xbmcgui
\par 
\par #get actioncodes from keymap.xml
\par ACTION_PREVIOUS_MENU = 10
\par ACTION_SELECT_ITEM = 7
\par 
\par class MyClass(xbmcgui.Window):
\par \tab def onAction(self, action):
\par \tab \tab if action == ACTION_PREVIOUS_MENU:
\par \tab \tab \tab self.close()
\par \tab \tab if action == ACTION_SELECT_ITEM:
\par }{\expnd0\expndtw-4\lang1024 \tab \tab \tab self.strAction = xbmcgui.ControlLabel(300, 200, 200, 200, }{\lang1024 ""}{\expnd0\expndtw-4\lang1024 , }{\lang1024 "}{\expnd0\expndtw-4\lang1024 font14}{\lang1024 "}{\expnd0\expndtw-4\lang1024 , }{\lang1024 "}{
\expnd0\expndtw-4\lang1024 0xFF00FF00}{\lang1024 "}{\expnd0\expndtw-4\lang1024 )
\par }{\lang1024 \tab \tab \tab self.addControl(self.strAction)
\par \tab \tab \tab self.strAction.setLabel("Hello world")
\par 
\par mydisplay = MyClass()
\par mydisplay.doModal()
\par del mydisplay 
\par }\pard\plain \sb60\sa60\widctlpar\adjustright \lang2057\cgrid {\lang1024 Copy this script to your XBox and run it. Try pressing the "A" button and see what happens. Don't forget you have to push "Back" to stop the script!
\par }\pard\plain \s18\sb200\keepn\widctlpar\adjustright \b\f1\cf11\lang2057\cgrid {\lang1024 Control Objects - Removing a Text Label
\par }\pard\plain \sb60\sa60\widctlpar\adjustright \lang2057\cgrid {\lang1024 In \ldblquote xbmcgui.py\rdblquote  you get a handful of widgets that are called Control objects\endash 
these are the Button, Image, Label, FadeLabel, List, and TextBox). All Control objects share certain characteristics. Control object are GUI devices that are drawn over the window, and they\rquote re the main tools you\rquote 
ll use to interact with the script. As mentioned in the previous segment, you initialize Control objects with a function call (for instance: }{\f1\fs20\expnd0\expndtw-4\cf2\lang1024 self.strAction = xbmcgui.ControlLabel(30
0, 200, 200, 200, "", "font14", "0xFF00FF00")}{\expnd0\expndtw-4\lang1024 ), and then tell xbmc to draw them with the addControl function.}{\lang1024 
\par Well, we can also tell xbmc to stop drawing any Control, which will remove it from the display. To do this, use the function removeControl.
\par Let\rquote s stick with the same script, but add another option: pressing the "B" button will remove the Label that was created when you pressed "A". To do that, you have to recognize the "B" button:
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\lang1024 ACTION_PARENT_DIR = 9
\par }\pard\plain \sb60\sa60\widctlpar\adjustright \lang2057\cgrid {\lang1024 and then use these two lines in the onAction function:
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\lang1024 \tab \tab if action == ACTION_PARENT_DIR:
\par \tab \tab \tab self.removeControl(self.strAction)
\par }\pard\plain \sb60\sa60\widctlpar\adjustright \lang2057\cgrid {\lang1024 When you\rquote ve add these three lines, you should have a working script. }{\b\lang1024 The whole script should look like this:}{\lang1024 
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\lang1024 import xbmc, xbmcgui
\par 
\par #get actioncodes from keymap.xml
\par ACTION_PREVIOUS_MENU = 10
\par ACTION_SELECT_ITEM = 7
\par ACTION_PARENT_DIR = 9
\par 
\par class MyClass(xbmcgui.Window):
\par \tab def onAction(self, action):
\par \tab \tab if action == ACTION_PREVIOUS_MENU:
\par \tab \tab \tab self.close()
\par \tab \tab if action == ACTION_SELECT_ITEM:
\par }{\expnd0\expndtw-4\lang1024 \tab \tab \tab self.strAction = xbmcgui.ControlLabel(300, 200, 200, 200, "", }{\lang1024 "}{\expnd0\expndtw-4\lang1024 font14}{\lang1024 "}{\expnd0\expndtw-4\lang1024 , }{\lang1024 "}{\expnd0\expndtw-4\lang1024 0xFF00FF00}{
\lang1024 "}{\expnd0\expndtw-4\lang1024 )
\par }{\lang1024 \tab \tab \tab self.addControl(self.strAction)
\par \tab \tab \tab self.strAction.setLabel("Hello world")
\par \tab \tab if action == ACTION_PARENT_DIR:
\par \tab \tab \tab self.removeControl(self.strAction)
\par 
\par mydisplay = MyClass()
\par mydisplay.doModal()
\par del mydisplay 
\par }\pard\plain \s18\sb200\keepn\widctlpar\adjustright \b\f1\cf11\lang2057\cgrid {\lang1024 Control Objects - FadeLabel
\par }\pard\plain \sb60\sa80\widctlpar\adjustright \lang2057\cgrid {\lang1024 You also have another way to display text: a Control object called the FadeLabel. If you\rquote ve used XBMC much at all, you\rquote 
re probably familiar with these objects. A FadeLabel is a segment of your screen that will scroll text from left to right within its borders, and repeat the text when it gets to the end.
\par You\rquote ve probably seen this object used for RSS feeds, or perhaps to show the song artist when XBMC is playing an mp3.
\par You can do the same thing with a fairly simple script. You set up the FadeLabel much like you would a Label, but you don\rquote t have to worry about the length of the string\emdash anything that doesn\rquote 
t fit into the space provided will scroll into view.
\par The FadeLabel object also has a reset() function, which clears out all t
he text and leaves the FadeLabel in place, so you can still send new text to it later (unlike the removeControl function, which would clear the text from the screen but also destroy the FadeLabel object).
\par As we said, it\rquote s pretty easy to make a FadeLabel. This time we\rquote re going to make some big changes from the script we used last time. First, we\rquote 
re going to add a new function called __init__ right after declaring the class. The __init__ function is a special case in Python, it\rquote s a built-in function type (sim
ilar to a constructor in other languages) that runs automatically whenever you create an instance of a class. We\rquote ll talk more about that in the next segment.
\par For now, we\rquote ll just show you how to make one. Add these seven lines right after you create the class:
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\lang1024 \tab def __init__(self):
\par \tab \tab self.strActionInfo = xbmcgui.ControlLabel(100, 120, 200, 200, "", "font13", "0xFFFF00FF")
\par \tab \tab self.addControl(self.strActionInfo)
\par \tab \tab self.strActionInfo.setLabel("Push BACK to quit - A to reset text")
\par }{\expnd0\expndtw-4\lang1024 \tab \tab self.strActionFade = xbmcgui.ControlFadeLabel(200, 300, 200, 200, }{\lang1024 "}{\expnd0\expndtw-4\lang1024 font13}{\lang1024 "}{\expnd0\expndtw-4\lang1024 , "0xFFFFFF00}{\lang1024 "}{\expnd0\expndtw-4\lang1024 )

\par }{\lang1024 \tab \tab self.addControl(self.strActionFade)
\par }\pard \s15\li360\keep\widctlpar\adjustright {\lang1024 \tab \tab self.strActionFade.addLabel("This is a fade label")
\par }\pard\plain \sa60\widctlpar\adjustright \lang2057\cgrid {\lang1024 By now, you can probably glance at the first four lines and know what they do. The first declares that it\rquote s the beginning of a new function, called __init__ (the \ldblquote self
\rdblquote  inside the parameters means that this function is part of a class, and requires that class instance to run). The next three lines are just like what we were doing two segments earlier: creating a Label.
\par You can tell what this one does. It gives the user some basic information on how to run the program. The message it will show is "Push BACK to quit - A to reset text." Since it\rquote s in the __init__ function, this text
 will appear as soon as the class is created, which means as soon as the script is run. So the user will know what to do from the very start.
\par Now, the next three lines define the FadeLabel, and as you can see, they\rquote re almost identical. The only difference is the function }{call xbmcgui.ControlFadeLabel}{\lang1024  instead of }{xbmcgui.ControlLabel}{\lang1024 . That\rquote 
s all you have to do to make a text string that will scroll within the box.
\par }{\expnd0\expndtw-4\lang1024 FadeLabel has a very useful function called reset(), though, so let\rquote s go ahead and write this script to show you how to use that. You\rquote re already recognizing the "A" button press from earlier, so we\rquote 
ll stick with that.
\par We need to change onAction now, though, since it\rquote s doing something different. In your onAction function, leave the first if statement (the one that lets you close the script), but replace the other two with this one:
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\lang1024 \tab \tab if action == ACTION_SELECT_ITEM:
\par \tab \tab \tab self.strActionFade.reset()
\par }\pard\plain \sb60\widctlpar\adjustright \lang2057\cgrid {\lang1024 Now you can press "A" while the script is running to see how a FadeLabel\rquote s reset() function works. You shoul
d also have a pretty good idea by now how the special onAction function works. Also, you\rquote ll notice we no longer have an "if action ==" statement looking for the "B" button, so you can remove that line from the declaration of globals up above.

\par When you do all that, }{\b\lang1024 the whole script should look like this:}{\lang1024 
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\lang1024 import xbmc, xbmcgui
\par 
\par #get actioncodes from keymap.xml
\par ACTION_PREVIOUS_MENU = 10
\par ACTION_SELECT_ITEM = 7
\par 
\par class MyClass(xbmcgui.Window):
\par \tab def __init__(self):
\par \tab \tab self.strActionInfo = xbmcgui.ControlLabel(100, 120, 200, 200, "", "font13", "0xFFFF00FF")
\par \tab \tab self.addControl(self.strActionInfo)
\par \tab \tab self.strActionInfo.setLabel("Push BACK to quit - A to reset text")
\par }{\expnd0\expndtw-4\lang1024 \tab \tab self.strActionFade = xbmcgui.ControlFadeLabel(200, 300, 200, 200, }{\lang1024 "}{\expnd0\expndtw-4\lang1024 font13}{\lang1024 "}{\expnd0\expndtw-4\lang1024 , }{\lang1024 "}{\expnd0\expndtw-4\lang1024 0xFFFFFF00}{
\lang1024 "}{\expnd0\expndtw-4\lang1024 )
\par }{\lang1024 \tab \tab self.addControl(self.strActionFade)
\par \tab \tab self.strActionFade.addLabel("This is a fade label")
\par 
\par \tab def onAction(self, action):
\par \tab \tab if action == ACTION_PREVIOUS_MENU:
\par \tab \tab \tab self.close()
\par \tab \tab if action == ACTION_SELECT_ITEM:
\par \tab \tab \tab self.strActionFade.reset()
\par 
\par mydisplay = MyClass()
\par mydisplay.doModal()
\par del mydisplay 
\par }\pard\plain \sb60\sa60\widctlpar\adjustright \lang2057\cgrid {\lang1024 Try it on the XBox and see what happens. Press the "A" button while you\rquote 
re at it. Now try changing the text of the FadeLabel to something longer, such as "Behold, here you see before you the first and only almighty F
adeLabel of Doom which I, in my Pythonic coolness, have created by my very will." Something restrained and reasonable like that. Then run the script again, and watch it scroll. Press "A". There you go. Not a lot of exciting action, but now you\rquote 
re familiar with the FadeLabel, which is a very useful tool when trying to display long strings.
\par }\pard\plain \s18\sb200\keepn\widctlpar\intbl\adjustright \b\f1\cf11\lang2057\cgrid {\cf0\lang1024 Sidenote \endash  XBMC Emulator Scripts
\par }\pard\plain \sb60\sa60\widctlpar\intbl\adjustright \lang2057\cgrid {\lang1024 Did you try running this script on your PC, using Alexpoet\rquote s emulator scripts? If so, you probably got an error. That\rquote s because we used th
e __init__ function for the first time in this script.
\par When we define an __init__ function in our scripts, it replaces the __init__ function that the Emulator uses to draw the GUI window on your PC. There is still an easy way to get around this problem, bu
t it requires two extra lines in your script that you wouldn\rquote t need if you weren\rquote t using the emulator.
\par First, you have to find out whether the script is running on a PC or on the XBox. To do this, add the following lines right after your import statements:
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\intbl\adjustright \f1\fs20\cf2\lang2057\cgrid {\lang1024 try: Emulating = xbmcgui.Emulating
\par except: Emulating = False
\par }\pard\plain \sb60\sa60\widctlpar\intbl\adjustright \lang2057\cgrid {\lang1024 Now, as the very first line of your __init__ function, add this line:
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\intbl\adjustright \f1\fs20\cf2\lang2057\cgrid {\lang1024 \tab \tab if Emulating: xbmcgui.Window.__init__(self)
\par }\pard\plain \sb60\sa60\widctlpar\intbl\adjustright \lang2057\cgrid {\lang1024 That\rquote s all it takes. What this does, is tell the script to call the Emulator\rquote s __init__ function, too (the one replaced by }{\i\lang1024 your}{ class\rquote 
s __init__ function), before going on with running. Of course, if you\rquote re running the script on the XBox, it will just skip right past and do nothing.
\par For the sake of those of you using the Emulator in future development, I\rquote 
m going to include these necessary lines in all of the rest of the tutorial scripts. Note that the Emulator has been developed in the time since Alex first wrote this tutorial, and so these extra lines aren\rquote t part of the original tut
orial. However, they won\rquote t in any way interfere with the scripts\rquote  function on the XBox, so I see no harm in including them.
\par Alexpoet.\cell }\pard \widctlpar\intbl\adjustright {\row }\pard\plain \s18\sb200\keepn\widctlpar\adjustright \b\f1\cf11\lang2057\cgrid {\lang1024 Setting up Default Parameters in the Init Function
\par }\pard\plain \sb60\sa60\widctlpar\adjustright \lang2057\cgrid {\lang1024 
We already talked some in the last segment about the __init__ function. As we said before, the __init__ function is one that Python automatically runs whenever the class "MyClass" is launched. This is an extremely useful tool for adding elements that we n
eed when the script is first initialized, particularly for adding basic GUI items, such as a background image or text instructions that need to be on screen all the time.
\par To add these automatic elements, we use the __init__ function, as you\rquote ve already seen. Let\rquote s change the __init__ function from our last script slightly. We\rquote 
ll remove the FadeLabel (now that you know all about them), and have the instructional Label say something different:
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\lang1024 \tab \tab self.strActionInfo = xbmcgui.ControlLabel(100, 120, 200, 200, "", "font13", "0xFFFF00FF")
\par \tab \tab self.addControl(self.strActionInfo)
\par }\pard \s15\li360\keep\widctlpar\adjustright {\lang1024 \tab \tab self.strActionInfo.setLabel("Push BACK to quit, A to display text and B to erase it")
\par }\pard\plain \sb60\sa60\widctlpar\adjustright \lang2057\cgrid {\lang1024 (We\rquote re also adding two more lines\emdash one up above with the globals, and one in the __init__ functions\emdash that wi
ll make the PC Emulator scripts work. For details, read the Sidenote above.)
\par You already know what this part of the script does\emdash we talked about it in the last segment. Of course, now we\rquote re changing what the controls do, so we\rquote ve changed the Label\rquote s text.
\par Let\rquote s go ahead and do something new, then. In much the same way as we add Labels, we can also add a background image to help define the script. To do this, we\rquote 
ll add an instance of the  ControlImage object to our init function with this one line:
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\lang1024 \tab \tab self.addControl(xbmcgui.ControlImage(0,0,720,480, "background.gif"))
\par }\pard\plain \sb60\sa60\widctlpar\adjustright \lang2057\cgrid {\lang1024 That might look strange to you, because we\rquote 
re doing a lot here in one line. You see we start off with the function self.addControl, and inside the parentheses, instead of giving it the name of a 
Control object, we create the Control object right there. When you add a Control in one line like this, it has no name, and so there\rquote s no way to modify it later. That\rquote 
s why we use three lines to add (and name) a Label, and then modify the Label\rquote s text. With a background picture, though, you only show it once, and then leave it unchanged until the script closes.
\par You could just as well have written this script as two lines:
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\lang1024 \tab \tab pic = xbmcgui.ControlImage(0,0,720,480, "background.gif")
\par \tab \tab self.addControl(pic)
\par }\pard\plain \sb60\sa60\widctlpar\adjustright \lang2057\cgrid {\lang1024 Either way, it does the same thing, but for Controls you\rquote re only drawing and then leaving alone, it\rquote s often cleaner to just add them in one line.
\par But that brings up another issue: where in the __init__ function do we place that line? It\rquote s a very important que
stion, and you need to remember to draw the background image before the text, that way the image will be drawn, and then the text placed }{\i\lang1024 over}{\lang1024  the image. If we changed that order, the text would appear }{\i\lang1024 behind}{
\lang1024  the image, so the user would never see it.
\par Now, for this to work you\rquote ll have to }{\i\lang1024 have}{ an image file by the name of }{\lang1024 "}{background.}{\lang1024 gif"}{
 (or, of course, you could replace the filename in the script with the name of a file you have). This tutorial might have come zipped up with a background.gif image, but if n
ot you can create a very simple background just by making a picture 800 pixels by 600 pixels, and saving it with that filename.
\par You\rquote ll have to play with the background colour some to find one that clearly shows the font colour, and still looks good on scre
en. [Alexpoet's note: Of course, you might end up spending a lot of time doing that once you start developing scripts anyway. I sometimes find myself spending twice as long in Photoshop trying to get good support pics as I spend actually writing these scr
ipts.]
\par }\pard \sb60\widctlpar\adjustright {\b\caps Note:
\par }\pard \li288\ri288\sa60\widctlpar\adjustright {When you enter the filename in the xbmcgui.ControlImage function, you can enter just a filename (and Python will look for the file in the same folder as the script you\rquote 
re running), or you can enter a path. Remember that when you\rquote re entering }{\lang1024 directory paths in Python, you always have to replace "\\" with "\\\\", because Python uses "\\" to describe special characters.
\par }\pard \sb60\sa60\widctlpar\adjustright {\lang1024 So now we know how to build our __init__ function, let\rquote s put it into use. Everything else should be simple stuff that you know how to 
do by now. Put back in the line for recognizing the "B" button, and then change the onAction to draw a friendly message whenever you press "A", then delete it on "B".
\par Try to write this yourself. If you\rquote re having trouble, feel free to look ahead, but this is all stuff we\rquote ve covered before. When you\rquote re done, }{\b\lang1024 the whole script should look like this:}{\lang1024 
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\lang1024 import xbmc, xbmcgui
\par try: Emulating = xbmcgui.Emulating
\par except: Emulating = False
\par 
\par #get actioncodes from keymap.xml
\par ACTION_PREVIOUS_MENU = 10
\par ACTION_SELECT_ITEM = 7
\par ACTION_PARENT_DIR = 9
\par 
\par class MyClass(xbmcgui.Window):
\par \tab def __init__(self):
\par \tab \tab if Emulating: xbmcgui.Window.__init__(self)
\par \tab \tab self.addControl(xbmcgui.ControlImage(0,0,720,480, "Q:\\\\scripts\\\\Tutorial\\\\background.gif"))
\par \tab \tab self.strActionInfo = xbmcgui.ControlLabel(100, 200, 200, 200, "", "font13", "0xFFFF00FF")
\par \tab \tab self.addControl(self.strActionInfo)
\par \tab \tab self.strActionInfo.setLabel("Push BACK to quit, A to display text and B to erase it")
\par 
\par \tab def onAction(self, action):
\par \tab \tab if action == ACTION_PREVIOUS_MENU:
\par \tab \tab \tab self.close()
\par \tab \tab if action == ACTION_SELECT_ITEM:
\par }{\expnd0\expndtw-4\lang1024 \tab \tab \tab self.strAction = xbmcgui.ControlLabel(300, 300, 200, 200, }{\lang1024 ""}{\expnd0\expndtw-4\lang1024 , }{\lang1024 "}{\expnd0\expndtw-4\lang1024 font14}{\lang1024 "}{\expnd0\expndtw-4\lang1024 , }{\lang1024 "}{
\expnd0\expndtw-4\lang1024 0xFF00FF00}{\lang1024 "}{\expnd0\expndtw-4\lang1024 )
\par }{\lang1024 \tab \tab \tab self.addControl(self.strAction)
\par \tab \tab \tab self.strAction.setLabel("Hello world")
\par \tab \tab if action == ACTION_PARENT_DIR:
\par \tab \tab \tab self.removeControl(self.strAction)
\par 
\par mydisplay = MyClass()
\par mydisplay.doModal()
\par del mydisplay 
\par }\pard\plain \s18\sb200\keepn\widctlpar\adjustright \b\f1\cf11\lang2057\cgrid {\lang1024 Creating Basic Dialogs - The "OK" Box
\par }\pard\plain \sb60\sa60\widctlpar\adjustright \lang2057\cgrid {\lang1024 We can also build dialog boxes. XBMCGui provides us with three kinds of dialog box: "ok", "select", and "yesno".
\par The most basic of these is the "ok" box (although they're all pretty simple). So we'll start with that. First write a function that will create the dialog box:
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\lang1024 \tab def message(self):
\par \tab \tab dialog = xbmcgui.Dialog()
\par \tab \tab dialog.ok(" My message title", " This is a nice message")
\par }\pard\plain \sb60\sa60\widctlpar\adjustright \lang2057\cgrid {\lang1024 
You can see first we create the dialog instance, and then we make the type in a separate line. You would do the same thing if you were creating a "select" box or a "yesno". They all begin with the line: }{\f1\fs20\cf2\lang1024 dialog = xbmcgui.Dialog()}{
\lang1024 .
\par Now we need to build a function that will make the dialog box appear. To do this, change your onAction function to include these lines:
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\lang1024 \tab \tab if action == ACTION_SELECT_ITEM:
\par }\pard \s15\li360\keep\widctlpar\adjustright {\lang1024 \tab \tab \tab self.message()
\par }\pard\plain \sb60\widctlpar\adjustright \lang2057\cgrid {\lang1024 You can also strip out the onAction command for }{ACTION_PARENT_DIR}{\lang1024 , since we're not using the "B" button in this script.
\par Be sure to change the instructions in strActionInfo in your __init__ function, and that's all there is to it. }{\b\lang1024 The whole script should look like this:}{\lang1024 
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\lang1024 import xbmc, xbmcgui
\par try: Emulating = xbmcgui.Emulating
\par except: Emulating = False
\par 
\par #get actioncodes from keymap.xml
\par ACTION_PREVIOUS_MENU = 10
\par ACTION_SELECT_ITEM = 7
\par 
\par class MyClass(xbmcgui.Window):
\par \tab def __init__(self):
\par \tab \tab if Emulating: xbmcgui.Window.__init__(self)
\par \tab \tab self.addControl(xbmcgui.ControlImage(0,0,720,480, "Q:\\\\scripts\\\\Tutorial\\\\background.gif"))
\par \tab \tab self.strActionInfo = xbmcgui.ControlLabel(100, 200, 200, 200, "", "font13", "0xFFFF00FF")
\par \tab \tab self.addControl(self.strActionInfo)
\par \tab \tab self.strActionInfo.setLabel("Push BACK to quit or A to display dialog box")
\par 
\par \tab def onAction(self, action):
\par \tab \tab if action == ACTION_PREVIOUS_MENU:
\par \tab \tab \tab self.close()
\par \tab \tab if action == ACTION_SELECT_ITEM:
\par \tab \tab \tab self.message()
\par 
\par \tab def message(self):
\par \tab \tab dialog = xbmcgui.Dialog()
\par \tab \tab dialog.ok(" My message title", " This is a nice message ")
\par 
\par mydisplay = MyClass()
\par mydisplay.doModal()
\par del mydisplay 
\par }\pard\plain \s18\sb100\keepn\widctlpar\adjustright \b\f1\cf11\lang2057\cgrid {\lang1024 Using Basic Dialogs - More on the "OK" Box
\par }\pard\plain \sa60\widctlpar\adjustright \lang2057\cgrid {\lang1024 Now that you've seen it in action, let's look more closely at the code that creates an "ok" dialog:
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\lang1024 dialog = xbmcgui.Dialog()
\par dialog.ok(" My message title", " This is a nice message ")
\par }\pard\plain \sb60\widctlpar\adjustright \lang2057\cgrid {\lang1024 
That's the code from our last segment. You can see the first line tells xbmcgui to create an instance of a Dialog class. The second line creates the actual "ok" dialog, and passes it two strings: one for the title, and one for the box's message.
\par Once you know how the Dialog Boxes work, they're a very simple way of providing information to the user. Let's rewrite our script to use the same message function in a more general way:
\par First, change the dialog creation code to look like this:
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\lang1024 \tab def message(self, messageText):
\par \tab \tab dialog = xbmcgui.Dialog()
\par }\pard \s15\li360\keep\widctlpar\adjustright {\lang1024 \tab \tab dialog.ok(" My message title", messageText)
\par }\pard\plain \sa60\widctlpar\adjustright \lang2057\cgrid {\lang1024 Notice the difference. In the third line, we're not passing two strings, but a string and a variable. Of course, that variable (}{messageText}{\lang1024 ) must }{\i\lang1024 contain}{
 a string, or it will break the script when run. But messageText is passed in as one of the parameters of the message function.
\par Which means we have to change the place where the message function is called, up in onAction:
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\lang1024 \tab \tab if action == ACTION_PREVIOUS_MENU:
\par \tab \tab \tab self.message("goodbye")
\par \tab \tab \tab self.close()
\par \tab \tab if action == ACTION_SELECT_ITEM:
\par \tab \tab \tab self.message("you pushed A")
\par }\pard\plain \sb60\sa60\widctlpar\adjustright \lang2057\cgrid {Compare this onAction with the onAction code from our last segment. We're no longer just calling the function, but passing it a string (which is, basically, the message). }{\lang1024 
So now you know how to call a function inside another function :)
\par }\pard \sa60\widctlpar\adjustright {\lang1024 This time we can leave the action globals alone, as well as the strActionInfo instructions. Nothing changes except the way the script runs, and what it outputs. }{\b\lang1024 
So the whole script should look like this:}{\lang1024 
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\lang1024 import xbmc, xbmcgui
\par try: Emulating = xbmcgui.Emulating
\par except: Emulating = False
\par 
\par #get actioncodes from keymap.xml
\par ACTION_PREVIOUS_MENU = 10
\par ACTION_SELECT_ITEM = 7
\par 
\par class MyClass(xbmcgui.Window):
\par \tab def __init__(self):
\par \tab \tab if Emulating: xbmcgui.Window.__init__(self)
\par \tab \tab self.addControl(xbmcgui.ControlImage(0,0,720,480, "Q:\\\\scripts\\\\Tutorial\\\\background.gif"))
\par \tab \tab self.strActionInfo = xbmcgui.ControlLabel(100, 200, 200, 200, "", "font13", "0xFFFF00FF")
\par \tab \tab self.addControl(self.strActionInfo)
\par \tab \tab self.strActionInfo.setLabel("Push BACK to quit or A to display dialog box")
\par 
\par \tab def onAction(self, action):
\par \tab \tab if action == ACTION_PREVIOUS_MENU:
\par \tab \tab \tab self.message("Goodbye")
\par \tab \tab \tab self.close()
\par \tab \tab if action == ACTION_SELECT_ITEM:
\par \tab \tab \tab self.message("You pushed A")
\par 
\par \tab def message(self, messageText):
\par \tab \tab dialog = xbmcgui.Dialog()
\par \tab \tab dialog.ok("My message title", messageText)
\par 
\par mydisplay = MyClass()
\par mydisplay.doModal()
\par del mydisplay 
\par }\pard\plain \sb60\sa60\widctlpar\adjustright \lang2057\cgrid {\expnd0\expndtw-4\lang1024 This would be a helpful script to change around some on your own, to make sure you know how everything works. Maybe try to write a script that will pop-up 
a dialog box telling you which button you pressed.
\par }\pard \sa60\widctlpar\adjustright {\expnd0\expndtw-4\lang1024 Be careful with the message function, though. Make sure the only values you pass to it are strings. Ints and floats can be converted to strings explicitly (ie: }{
\f1\fs19\expnd0\expndtw-4\cf2\lang1024 number = str(num)}{\expnd0\expndtw-4\lang1024 ), but you can't feed the script a non-string value when it expects a string. It'll throw an error (and on the XBox, that almost certainly means a lock-up).
\par }\pard \sb60\widctlpar\adjustright {\lang1024 The only exception to this is Python's built-in print function. }{\f1\fs19\cf2\lang1024 print num}{\lang1024  or }{\f1\fs19\cf2\lang1024 print str(num)}{\lang1024  will work equally well, but that's 
designed for debugging output. For any other function that expects a string, passing it ints or floats won't work without an explicit conversion!
\par }\pard\plain \s18\sb200\keepn\widctlpar\adjustright \b\f1\cf11\lang2057\cgrid {\lang1024 Creating Basic Dialogs - The "YesNo" Box
\par }\pard\plain \sa60\widctlpar\adjustright \lang2057\cgrid {\lang1024 Another fairly standard dialog is the yes / no dialog box, which you'
ll use when asking for simple user feedback. It works exactly like an "ok" dialog, except that it returns a value of True, if the user selects "Yes" and False if the user selects "No".
\par }\pard \widctlpar\adjustright {\lang1024 So instead of:
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\lang1024 \tab def message(self, messageText):
\par \tab \tab dialog = xbmcgui.Dialog()
\par \tab \tab dialog.ok(" My message title", messageText)
\par }\pard\plain \sb60\widctlpar\adjustright \lang2057\cgrid {\lang1024 We type:
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\lang1024 \tab def goodbye(self):
\par \tab \tab dialog = xbmcgui.Dialog()
\par \tab \tab if dialog.yesno("message", "do you want to leave?"):
\par \tab \tab \tab self.close()
\par }\pard\plain \sb60\widctlpar\adjustright \lang2057\cgrid {\lang1024 You can see the line creating the yesno dialog begins with "}{if}{\lang1024 " and ends with a "}{:}{\lang1024 ". This is the same as saying "}{\f1\fs19\cf2\lang1024 
if dialog.yesno("message", "do you want to leave?") == True:}{\lang1024 ". The line that follows (which, you can see, is indented another level) will only run if the user selects "Yes" from the dialog box.
\par Now set up onAction to call this function }{\i\lang1024 instead of}{ self.close() when the "Back" button is pressed. }{\lang1024 
That's really all that needs changing. To keep things clear, let's remove the onAction for the "A" button, and rewrite our strActionInfo instructions. Three cheers for minimalism.
\par }\pard \sb60\sa60\widctlpar\adjustright {\b\lang1024 The whole script should look like this:
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\lang1024 import xbmc, xbmcgui
\par try: Emulating = xbmcgui.Emulating
\par except: Emulating = False
\par 
\par #get actioncodes from keymap.xml
\par ACTION_PREVIOUS_MENU = 10
\par 
\par class MyClass(xbmcgui.Window):
\par \tab def __init__(self):
\par \tab \tab if Emulating: xbmcgui.Window.__init__(self)
\par \tab \tab self.addControl(xbmcgui.ControlImage(0,0,720,480, "Q:\\\\scripts\\\\Tutorial\\\\background.gif"))
\par \tab \tab self.strActionInfo = xbmcgui.ControlLabel(100, 200, 200, 200, "", "font13", "0xFFFF00FF")
\par \tab \tab self.addControl(self.strActionInfo)
\par \tab \tab self.strActionInfo.setLabel("Push BACK to quit.")
\par 
\par \tab def onAction(self, action):
\par \tab \tab if action == ACTION_PREVIOUS_MENU:
\par \tab \tab \tab self.goodbye()
\par 
\par \tab def goodbye(self):
\par \tab \tab dialog = xbmcgui.Dialog()
\par \tab \tab if dialog.yesno("Message", "Do you want to leave?"):
\par \tab \tab \tab self.close()
\par 
\par mydisplay = MyClass()
\par mydisplay.doModal()
\par }\pard \s15\li360\keep\widctlpar\adjustright {\lang1024 del mydisplay 
\par }\pard\plain \s18\sb200\keepn\widctlpar\adjustright \b\f1\cf11\lang2057\cgrid {\lang1024 Creating Basic Dialogs - The "Select" Box
\par }\pard\plain \sb60\sa60\widctlpar\adjustright \lang2057\cgrid {\lang1024 The final and most complex of the basic dialogs is the "select" box. This dialog contains a list of possible choices. The user can scroll up an
d down through the list, and select one of them. Drawing the dialog, just like the other two, is pretty simple. This time you pass it a title, a message (to let the user know what he's choosing), and a Python list containing the possible choices (all as s
trings, by the way).
\par So all we }{\i\lang1024 really}{ need to get information from the "select" box is this:
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\tab def chooseOne(self):
\par \tab \tab possibleChoices = ["Yes", "Probably", "Maybe", "Probably Not", "No"]
\par \tab \tab dialog = xbmcgui.Dialog()
\par \tab \tab choice = dialog.select("Do you think this will work?", possibleChoices)
\par }\pard\plain \sb60\sa60\widctlpar\adjustright \lang2057\cgrid {There we have a list of strings, the creation of a Dialog instance, and then the dialog.select() call which will return the user-selected value (and save it in the variable choice). We
 can replace the goodbye function with this one.
\par Here's where the "select" box gets a little tricky, though. The value that it returns is }{\i not}{ the selected item; it's the list index of the selected item. That means, if we ran the code above, and the user se
lected "Yes," then choice would be equal to 0, not the word "Yes". (In Python, as in most programming languages, counting begins at 0, so the first item in the list is 0, and the fifth item in a list is 4 \endash  you'll get used to it in time).
\par If you're familia
r with lists and list indexes and not too worried about getting confused by this one, then skip to the whole script at the end of this segment, read through it, and try it on the XBox. But I'm going to take a moment here and explain in greater detail.

\par Okay
...to make things more clear, let's add another Label to our script, so we can see the value of our variable choice. We'll put it up in the __init__ function, then set its value right in the chooseOne function. To begin with, it will be empty, but when a 
user selects one of the items from the dialog, it will show the value returned.
\par So up in the script's __init__, add:
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\tab \tab self.choiceLabel = xbmcgui.ControlLabel(300, 300, 100, 100, "", "font13", "0xFFFF00FF")
\par \tab \tab self.addControl(self.choiceLabel)
\par }\pard\plain \sb60\sa60\widctlpar\adjustright \lang2057\cgrid {And then add the label's output line at the end of the chooseOne function:
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\tab \tab self.choiceLabel.setLabel("Choice: " + str(choice))
\par }\pard\plain \sb60\sa60\widctlpar\adjustright \lang2057\cgrid {That's all we need to use a "select" box and see the returned value, but we've got to change the onAction to make it work. Add ACTION_SELECT_
ITEM back into the globals, and change onAction to look like this:
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\tab def onAction(self, action):
\par \tab \tab if action == ACTION_PREVIOUS_MENU:
\par \tab \tab \tab self.close()
\par \tab \tab if action == ACTION_SELECT_ITEM:
\par \tab \tab \tab self.chooseOne()
\par }\pard\plain \sb60\sa60\widctlpar\adjustright \lang2057\cgrid {We're not finished yet, this is just for demonstration, but if you put the whole script together, it would look like this:
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {import xbmc, xbmcgui
\par try: Emulating = xbmcgui.Emulating
\par except: Emulating = False
\par 
\par #get actioncodes from keymap.xml
\par ACTION_PREVIOUS_MENU = 10
\par ACTION_SELECT_ITEM = 7
\par 
\par class MyClass(xbmcgui.Window):
\par \tab def __init__(self):
\par \tab \tab if Emulating: xbmcgui.Window.__init__(self)
\par }{\lang1024 \tab \tab self.addControl(xbmcgui.ControlImage(0,0,720,480, "Q:\\\\scripts\\\\Tutorial\\\\background.gif"))
\par \tab \tab self.strActionInfo = xbmcgui.ControlLabel(100, 200, 200, 200, "", "font13", "0xFFFF00FF")
\par }{\tab \tab self.addControl(self.strActionInfo)
\par \tab \tab self.strActionInfo.setLabel("Push BACK to quit or A to choose from a select dialog.")
\par \tab \tab self.choiceLabel = xbmcgui.ControlLabel(300, 300, 100, 100, "", "font13", "0xFFFF00FF")
\par \tab \tab self.addControl(self.choiceLabel)
\par 
\par \tab def onAction(self, action):
\par \tab \tab if action == ACTION_PREVIOUS_MENU:
\par \tab \tab \tab self.close()
\par \tab \tab if action == ACTION_SELECT_ITEM:
\par \tab \tab \tab self.chooseOne()
\par 
\par \tab def chooseOne(self):
\par \tab \tab possibleChoices = ["Yes", "Probably", "Maybe", "Probably Not", "No"]
\par \tab \tab dialog = xbmcgui.Dialog()
\par \tab \tab choice = dialog.select("Do you think this will work?", possibleChoices)
\par \tab \tab self.choiceLabel.setLabel("Choice: " + str(choice))
\par 
\par mydisplay = MyClass()
\par mydisplay.doModal()
\par del mydisplay
\par }\pard\plain \sb60\sa60\widctlpar\adjustright \lang2057\cgrid {\lang1024 Try this out on your XBox. When you select "Yes" in the dialog, the output says "0" (just like I said it would :-). That's how a select dialog works.
\par It's not a hard problem to fix, though. Whenever you make a "select" dialog, you already have the list available, and the list index tells you where to find the item in the list (that's the whole point).
\par So let's change the third line in chooseOne to say:
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\tab \tab ndex = dialog.select("Do you think this will work?", possibleChoices)
\par }\pard\plain \sb60\sa60\widctlpar\adjustright \lang2057\cgrid {\lang1024 And add a line right after that that says:
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\tab \tab choice = possibleChoices[ndex]}{\lang1024 
\par }\pard\plain \sb60\sa60\widctlpar\adjustright \lang2057\cgrid {\lang1024 Now run the script again, and see what the label says. It should print out exactly what you }{selected from the list. You can also remove the "}{\f1\fs19\cf2 str(choice)}{
" from the line after that (so it\rquote s just \ldblquote }{\f1\fs19\cf2 choice}{\rdblquote ), because the}{\lang1024  variable }{choice}{\lang1024  is now already set to a string (when it was a list index, it was an integer).
\par }{\b\lang1024 The whole script should look like this:
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\lang1024 import xbmc, xbmcgui
\par try: Emulating = xbmcgui.Emulating
\par except: Emulating = False
\par 
\par #get actioncodes from keymap.xml
\par ACTION_PREVIOUS_MENU = 10
\par ACTION_SELECT_ITEM = 7
\par 
\par class MyClass(xbmcgui.Window):
\par \tab def __init__(self):
\par \tab \tab if Emulating: xbmcgui.Window.__init__(self)
\par \tab \tab self.addControl(xbmcgui.ControlImage(0,0,720,480, "Q:\\\\scripts\\\\Tutorial\\\\background.gif"))
\par \tab \tab self.strActionInfo = xbmcgui.ControlLabel(100, 200, 200, 200, "", "font13", "0xFFFF00FF")
\par \tab \tab self.addControl(self.strActionInfo)
\par \tab \tab self.strActionInfo.setLabel("Push BACK to quit or A to choose from a select dialog.")
\par \tab \tab self.choiceLabel = xbmcgui.ControlLabel(300, 300, 100, 100, "", "font13", "0xFFFF00FF")
\par \tab \tab self.addControl(self.choiceLabel)
\par 
\par \tab def onAction(self, action):
\par \tab \tab if action == ACTION_PREVIOUS_MENU:
\par \tab \tab \tab self.close()
\par \tab \tab if action == ACTION_SELECT_ITEM:
\par \tab \tab \tab self.chooseOne()
\par 
\par \tab def chooseOne(self):
\par \tab \tab possibleChoices = ["Yes", "Probably", "Maybe", "Probably Not", "No"]
\par \tab \tab dialog = xbmcgui.Dialog()
\par \tab \tab ndex = dialog.select("Do you think this will work?", possibleChoices)
\par \tab \tab choice = possibleChoices[ndex]
\par \tab \tab self.choiceLabel.setLabel("Choice: " + str(choice))
\par 
\par mydisplay = MyClass()
\par mydisplay.doModal()
\par del mydisplay 
\par }\pard\plain \s18\sb100\keepn\widctlpar\adjustright \b\f1\cf11\lang2057\cgrid {\lang1024 Control Objects \endash  Adding a GUI Button
\par }\pard\plain \sa40\widctlpar\adjustright \lang2057\cgrid {\lang1024 Okay, enough of dialog boxes! It\rquote s time to get back to making widgets, and making your scripts do more. Let\rquote s build a button on the GUI and see how it works!
\par Buiding a button works much like any other Control Object, using the xbmcgui.ControlButton function. It takes 5 arguments, like this: }{\f1\fs20\cf2\lang1024 xbmcgui.ControlButton(350, 400, 80, 30, "HELLO")}{\lang1024 .
\par }\pard \sa60\widctlpar\adjustright {\lang1024 Again, we start with the X and Y positions (350 and 400 respectively) and then the width and height (80 and 30 here) and the last is a text string that will show up as a label on the button.
\par }\pard \widctlpar\adjustright {\lang1024 So we\rquote ll add the extra lines necessary to make a working Control Object. Unlike the Labels we\rquote ve worked with before, after you build a Button it\rquote s important to make xbmcgui focus on it:
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\lang1024 self.button0 = xbmcgui.ControlButton(350, 400, 80, 30, "HELLO")
\par self.addControl(self.button0)
\par }\pard \s15\li360\keep\widctlpar\adjustright {\lang1024 self.setFocus(self.button0)
\par }\pard\plain \sa60\widctlpar\adjustright \lang2057\cgrid {\lang1024 As you can see, \ldblquote setFocus\rdblquote  is the function that does it. When you add more than one button to a script, you\rquote 
ll only need to setFocus on one of them (whichever you want to start out selected), but get in the habit of setting the focus at least once per script, if you\rquote re using any buttons at all.
\par }\pard \sa40\widctlpar\adjustright {\lang1024 Now that you\rquote ve got a button built, you have to tell the script what to do when the button is activated. A GUI Button is activated by pressing \ldblquote A\rdblquote 
 on the controller when a Button (or other usable Control Object, like a List) is selected.
\par }\pard \sa60\widctlpar\adjustright {\lang1024 You already know that pushing the \ldblquote A\rdblquote  button will call the script\rquote s onAction function, and pass it the value of the \ldblquote A\rdblquote 
 button. If a usable Control Object is selected, it will }{\i\lang1024 also}{\lang1024  call the script\rquote s onControl function, and pass it the Control Object that was used.
\par This function (onControl) is another special built-in function that handles events, just like onAction. Most advanced scripts tend to contain both an onAction function to handle controller keypresses and an onControl function to handle GUI events. Here we
\rquote ll build our first onControl. 
\par First, remove the second \ldblquote if\rdblquote  statement from your onAction function. You don\rquote t }{\i\lang1024 want}{\lang1024  to handle the \ldblquote A\rdblquote  button in your onAction anymore\emdash now you want to let \ldblquote A
\rdblquote  call onControl. We\rquote re going to get rid of the chooseOne function, too, and replace it with a simpler function we wrote earlier: the basic message function, that opened an \ldblquote ok\rdblquote  box. We\rquote 
ll use that for output (which means you can take \ldblquote choiceLabel\rdblquote  out of the __init__ function, too).
\par }\pard \widctlpar\adjustright {\lang1024  Now add these lines just after the onAction function in your script:
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\lang1024 def onControl(self, control):
\par \tab if control == self.button0:
\par \tab \tab self.outputLabel.setLabel( "Button Pushed")
\par }\pard\plain \sb60\sa60\widctlpar\adjustright \lang2057\cgrid {\expnd-1\expndtw-6\lang1024 And that\rquote s a working Button, with working events already triggered! }{\b\expnd-1\expndtw-6\lang1024 The whole script should look like this:}{
\expnd-1\expndtw-6\lang1024 
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\lang1024 import xbmc, xbmcgui
\par try: Emulating = xbmcgui.Emulating
\par except: Emulating = False
\par 
\par #get actioncodes from keymap.xml
\par ACTION_PREVIOUS_MENU = 10
\par 
\par class MyClass(xbmcgui.Window):
\par \tab def __init__(self):
\par \tab \tab if Emulating: xbmcgui.Window.__init__(self)
\par \tab \tab self.addControl(xbmcgui.ControlImage(0,0,720,480, "Q:\\\\scripts\\\\Tutorial\\\\background.gif"))
\par \tab \tab self.strActionInfo = xbmcgui.ControlLabel(100, 200, 200, 200, "", "font13", "0xFFFF00FF")
\par \tab \tab self.addControl(self.strActionInfo)
\par \tab \tab self.strActionInfo.setLabel("Push BACK to quit. Push the button if you absolutely must.")
\par \tab \tab self.button0 = xbmcgui.ControlButton(350, 400, 80, 30, "Push Me!")
\par \tab \tab self.addControl(self.button0)
\par \tab \tab self.setFocus(self.button0)
\par 
\par \tab def onAction(self, action):
\par \tab \tab if action == ACTION_PREVIOUS_MENU:
\par \tab \tab \tab self.close()
\par 
\par \tab def onControl(self, control):
\par \tab \tab if control == self.button0:
\par \tab \tab \tab self.message("You pushed the button.")
\par 
\par \tab def message(self, messageText):
\par \tab \tab dialog = xbmcgui.Dialog()
\par \tab \tab dialog.ok(" My message title", messageText)
\par 
\par mydisplay = MyClass()
\par mydisplay.doModal()
\par }\pard \s15\li360\keep\widctlpar\adjustright {\lang1024 del mydisplay 
\par }\pard\plain \sb60\sa60\widctlpar\adjustright \lang2057\cgrid {\lang1024 Note that you can also remove the button from the screen using removeControl: 
\par }\pard\plain \s15\li360\keep\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\lang1024 self.removeControl(self.button0)
\par }\pard\plain \sb60\sa60\widctlpar\adjustright \lang2057\cgrid {\lang1024 We\rquote ve discussed removeControl before. It works the same way with a Button, removing it from the display. Try adding a new command in onAction that will respond to the 
\ldblquote B\rdblquote  button by making our Button object disappear. 
\par }\pard\plain \s18\sb200\keepn\widctlpar\adjustright \b\f1\cf11\lang2057\cgrid {\lang1024 Control Objects \endash  Associating Multiple Buttons
\par }\pard\plain \sb60\sa60\widctlpar\adjustright \lang2057\cgrid {\lang1024 Of course, one button is rarely enough to keep an interesting script working. You can add as many bu
ttons as you can find room for on the screen, but in order for them to work you have to give the user some way to move among them.
\par One way, of course, is with the setFocus command. You\rquote ve seen how that works earlier. You }{\i\lang1024 could}{ write some complicated script that cycles the focus among the Button objects whenever the user presses \ldblquote White\rdblquote 
 or something, but there\rquote s a much easier way: associating Control Objects.
\par Associating Control Objects is done by explicitly telling your script which objects are next to any given object\emdash and in which direction. You do this using the controlUp, controlDown, controlLeft, and controlRight functions on a Control Object.

\par Let\rquote s say you\rquote ve got a button named \ldblquote ButtonLeft\rdblquote  with another beside it named \ldblquote ButtonRight\rdblquote . They\rquote re already made, and ready to use, but you decide to associate them. You\rquote 
d write code that looked something like this:
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\lang1024 ButtonLeft.controlRight(ButtonRight)
\par ButtonRight.controlLeft(ButtonLeft)
\par }\pard\plain \sb60\sa60\widctlpar\adjustright \lang2057\cgrid {This tells the script that the button to the right of ButtonLeft is ButtonRigh
t. Makes sense. You could even make it circular, so if you go right to select ButtonRight, and then move off-screen to the right, it\rquote ll come back around to ButtonLeft. That\rquote d look like this:
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\lang1024 ButtonLeft.controlRight(ButtonRight)
\par ButtonLeft.controlLeft(ButtonRight)
\par ButtonRight.controlRight(ButtonLeft)
\par ButtonRight.controlLeft(ButtonLeft)
\par }\pard\plain \sb60\sa60\widctlpar\adjustright \lang2057\cgrid {You probably wouldn\rquote t bother with that, though. Mostly you\rquote re only going to set up the least you have to that will still allow users to move around your script. But it helps t
o think through everything you could do. Also, try to always make associations that make sense graphically on the page. Don\rquote t use controlUp to get to a Control directly to your right, unless it somehow makes sense in your script.
\par Okay, so far these are general examples, but we\rquote ve explained what really goes into making it work. And nothing else in this segment is particularly new, so we\rquote ll skip straight to the end. }{\b The whole script should look like this:}{
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\lang1024 import xbmc, xbmcgui
\par try: Emulating = xbmcgui.Emulating
\par except: Emulating = False
\par 
\par #get actioncodes from keymap.xml
\par ACTION_PREVIOUS_MENU = 10
\par 
\par class MyClass(xbmcgui.Window):
\par \tab def __init__(self):
\par \tab \tab if Emulating: xbmcgui.Window.__init__(self)
\par \tab \tab self.addControl(xbmcgui.ControlImage(0,0,720,480, "Q:\\\\scripts\\\\Tutorial\\\\background.gif"))
\par \tab \tab self.strActionInfo = xbmcgui.ControlLabel(100, 200, 200, 200, "", "font13", "0xFFFF00FF")
\par \tab \tab self.addControl(self.strActionInfo)
\par \tab \tab self.strActionInfo.setLabel("Push BACK to quit.")
\par 
\par \tab \tab # Make all the buttons
\par \tab \tab self.button0 = xbmcgui.ControlButton(250, 150, 120, 30, "1. Push Me!")
\par \tab \tab self.addControl(self.button0)
\par \tab \tab self.button1 = xbmcgui.ControlButton(250, 250, 120, 30, "2. Push Me!")
\par \tab \tab self.addControl(self.button1)
\par \tab \tab self.button2 = xbmcgui.ControlButton(450, 250, 120, 30, "3. Push Me!")
\par \tab \tab self.addControl(self.button2)
\par \tab \tab self.setFocus(self.button0)
\par \tab \tab self.button0.controlDown(self.button1)
\par \tab \tab self.button1.controlUp(self.button0)
\par \tab \tab self.button1.controlRight(self.button2)
\par \tab \tab self.button2.controlLeft(self.button1)
\par 
\par \tab def onAction(self, action):
\par \tab \tab if action == ACTION_PREVIOUS_MENU:
\par \tab \tab \tab self.close()
\par 
\par \tab def onControl(self, control):
\par \tab \tab if control == self.button0:
\par \tab \tab \tab self.message("You pushed the first button.")
\par \tab \tab if control == self.button1:
\par \tab \tab \tab self.message("You pushed the second button.")
\par \tab \tab if control == self.button2:
\par \tab \tab \tab self.message("You pushed the third button.")
\par 
\par \tab def message(self, messageText):
\par \tab \tab dialog = xbmcgui.Dialog()
\par \tab \tab dialog.ok(" My message title", messageText)
\par 
\par mydisplay = MyClass()
\par mydisplay.doModal()
\par del mydisplay 
\par }\pard\plain \sb60\sa60\widctlpar\adjustright \lang2057\cgrid {\expnd0\expndtw-2\lang1024 You can see we added all three Buttons in the __init__ function, and then used setFocus just once to start out with button0 selected. }{\i\expnd0\expndtw-2\lang1024 
Then }{\expnd0\expndtw-2\lang1024 we added the associations to allow users to switch which Button was selected. And finally we adjusted onControl to make sure it had something to do for any Button pushed. 
\par }\pard\plain \s18\sb200\keepn\widctlpar\adjustright \b\f1\cf11\lang2057\cgrid {\lang1024 Control Objects \endash  Lists (Sometimes Called "Listboxes"...but not by XBMC)
\par }\pard\plain \sb60\sa60\widctlpar\adjustright \lang2057\cgrid {\lang1024 The last of our Control Object is the List. A List creates an area on the display capable of taking ListItems (strings that will appear as individual lines within the List\rquote 
s area) which are selectable. A List that has the script\rquote s focus will have a horizontal bar showing which item in the list is selected.
\par Creating a List instance is much like any other Control Object. Here\rquote s a sample:
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\lang1024 \tab \tab self.list = xbmcgui.ControlList(200, 150, 300, 300)
\par \tab \tab self.addControl(self.list)
\par \tab \tab self.list.addItem("Item 1")
\par \tab \tab self.list.addItem("Item 2")
\par \tab \tab self.list.addItem("Item 3")
\par \tab \tab self.setFocus(self.list)
\par }\pard\plain \sb60\sa60\widctlpar\adjustright \lang2057\cgrid {\lang1024 I don\rquote t think you\rquote ll have any trouble guessing what this does. The text strings passed to self.list.addItem will appear in the List in the same order they\rquote 
re added in the script. Of course, you could add these items to a Python list, and then use a Python for loop to add them all, like this:
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\lang1024 \tab \tab self.list = xbmcgui.ControlList(200, 150, 300, 300)
\par \tab \tab self.addControl(self.list)
\par \tab \tab items = ["Item 1", "Item 2", "Item 3"]
\par \tab \tab for item in items:
\par \tab \tab \tab self.list.addItem(item)
\par \tab \tab self.setFocus(self.list)
\par }\pard\plain \sb60\sa60\widctlpar\adjustright \lang2057\cgrid {\lang1024 If you\rquote re familiar with Python, that will be familiar to you. Of course, if you\rquote re familiar with Python, you\rquote 
d probably already figured that out. If that last set of code doesn\rquote t make sense to you, don\rquote t worry about it. We\rquote ll go ahead and introduce the items one at a time in our official script. But when you get into more adv
anced scripting, you\rquote ll find that most ListItems are added out of a Python list.
\par So, now we\rquote ve got a List containing three different items. A List, like a Button, is a usable Control. Any time a List has focus and the user presses \ldblquote A\rdblquote , XBMC calls the script\rquote s onControl function, and passes it the }{
\i\lang1024 List}{\lang1024 . It\rquote s important to realize that onControl is given the List instance that }{\i\lang1024 contains}{\lang1024  the selected ListItem\emdash it isn\rquote 
t handed the actual item selected from the List. We have to get that ourselves.
\par To do that, we use a pair of functions: getSelectedItem and getLabel. First, let\rquote s get the script ready. Pull all of the buttons out of the __init__ and add in our new List (as described above). You can use }{\i\lang1024 either }{\lang1024 
of the methods I typed out, they both do the same thing.
\par And now that we don\rquote t have any Buttons, get rid of your old onControl. Here\rquote s where we use getSelectedItem and getLabel. Use this for your new onControl:
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\lang1024 \tab def onControl(self, control):
\par \tab \tab if control == self.list:
\par \tab \tab \tab item = self.list.getSelectedItem()
\par \tab \tab \tab self.message("You selected : " + item.getLabel())\tab 
\par }\pard\plain \sb60\sa60\widctlpar\adjustright \lang2057\cgrid {\expnd0\expndtw-2\lang1024 You can see that we first use getSelectedItem to find out which ListItem within the list is selected (a ListItem is a separate class, it\rquote 
s not just a text string), and }{\i\expnd0\expndtw-2\lang1024 then}{\expnd0\expndtw-2\lang1024  we use the ListItem\rquote s getLable function to find out what the string is. That\rquote s most all you need to know, at least for now. Let\rquote 
s see this thing in action.
\par }{\b The whole script should look like this:}{
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\lang1024 import xbmc, xbmcgui
\par try: Emulating = xbmcgui.Emulating
\par except: Emulating = False
\par 
\par #get actioncodes from keymap.xml
\par ACTION_PREVIOUS_MENU = 10
\par 
\par class MyClass(xbmcgui.Window):
\par \tab def __init__(self):
\par \tab \tab if Emulating: xbmcgui.Window.__init__(self)
\par \tab \tab self.addControl(xbmcgui.ControlImage(0,0,720,480, "Q:\\\\scripts\\\\Tutorial\\\\background.gif"))
\par \tab \tab self.strActionInfo = xbmcgui.ControlLabel(100, 200, 200, 200, "", "font13", "0xFFFF00FF")
\par \tab \tab self.addControl(self.strActionInfo)
\par \tab \tab self.strActionInfo.setLabel("Push BACK to quit, or select an item from the list and push A")
\par 
\par \tab \tab # Make the List
\par \tab \tab self.list = xbmcgui.ControlList(300, 250, 200, 200)
\par \tab \tab self.addControl(self.list)
\par \tab \tab self.list.addItem("Item 1")
\par \tab \tab self.list.addItem("Item 2")
\par \tab \tab self.list.addItem("Item 3")
\par \tab \tab self.setFocus(self.list)
\par 
\par \tab def onAction(self, action):
\par \tab \tab if action == ACTION_PREVIOUS_MENU:
\par \tab \tab \tab self.close()
\par \tab 
\par \tab def onControl(self, control):
\par \tab \tab if control == self.list:
\par \tab \tab \tab item = self.list.getSelectedItem()
\par \tab \tab \tab self.message("You selected : " + item.getLabel())\tab 
\par 
\par \tab def message(self, message):
\par \tab \tab dialog = xbmcgui.Dialog()
\par \tab \tab dialog.ok(" My message title", message)
\par 
\par mydisplay = MyClass()
\par mydisplay.doModal()
\par del mydisplay
\par }\pard\plain \sb60\widctlpar\adjustright \lang2057\cgrid {\expnd0\expndtw-3\lang1024 That\rquote s really all you need to know about the Dialog Boxes and Control Objects, the basic widgets of the xbmcgui library. There\rquote s still a lot to teach, t
hough. The next segment will teach you how to get more direct user feedback, using a built-in virtual keyboard. The segments following that will walk you through the process of getting information about the XBox from XBMC. Finally, we\rquote 
ll show you some more advanced tools such as child windows and non-XBMC uses for scripts, like a simple internet file downloader.
\par }\pard\plain \s18\sb200\keepn\widctlpar\adjustright \b\f1\cf11\lang2057\cgrid {\lang1024 Using the Virtual Keyboard
\par }\pard\plain \sb60\widctlpar\adjustright \lang2057\cgrid {\lang1024 Before we get into the complicated stuff, though, let\rquote s do the easy one. XBMC provides a very basic but surprisingly ver
satile virtual keyboard. You can call it from any script that imports the xbmc library, and your script can get not only what text the user entered, but whether or not the keyboard was canceled. Your script can also provide default text to the keyboard, t
o save the user time.
\par The basic keyboard call is very simple, and requires a doModal command to make it appear (just like an xbmcgui.Window). In your display.py script, remove all the List stuff, including the onControl function. We\rquote re going to write a very
 basic keyboard interface for now. First, add a new Label to your __init__ so we can get some feedback:
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\lang1024 \tab \tab self.outputLabel = xbmcgui.ControlLabel(100, 300, 200, 200, "", "font13", "0xFFFFFFFF")
\par \tab \tab self.addControl(self.outputLabel)
\par }\pard\plain \sb60\widctlpar\adjustright \lang2057\cgrid {\lang1024 Now add in the keyboard itself. These two lines make the keyboard (and provide it with a default text).
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\lang1024 \tab \tab keyboard = xbmc.Keyboard("Entered Text")
\par \tab \tab keyboard.doModal()
\par }\pard\plain \sb60\widctlpar\adjustright \lang2057\cgrid {\lang1024 After calling doModal, your script will sit and wait for the user to finish with the keyboard. They can finish by typing in new text (or accepting the default) and pressing \ldblquote Y
\rdblquote  to confirm, or by pressing \ldblquote B\rdblquote  to cancel. Either way, the script will continue, so the first thing we do is add an \ldblquote if\rdblquote  statement to make sure the keyboard\rquote s text is legitimate user input. 
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\lang1024 \tab \tab if (keyboard.isConfirmed()):
\par \tab \tab \tab self.outputLabel.setLabel(keyboard.getText())
\par }\pard\plain \sb60\widctlpar\adjustright \lang2057\cgrid {\lang1024 You can see we used the keyboard\rquote s function getText to find out what the entered value }{\i\lang1024 was}{\lang1024 , once we knew it was legitimate. And now let\rquote s add an 
\ldblquote else\rdblquote  just so we\rquote ll know what counts as an accept, and what\rquote s a cancel:
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\lang1024 \tab \tab else:
\par \tab \tab \tab self.outputLabel.setLabel("User Canceled")
\par }\pard\plain \sb60\sa60\widctlpar\adjustright \lang2057\cgrid {\lang1024 Now, the way this script works, it will print to the outputLabel any text entered at the keyboard, unless the user cancels the keyboard, in which c
ase it will say so. This script is very simple, but a keyboard\rquote s really not hard to use. Once you know how to do it at all, you pretty much know how to do it all, see? }{\b\lang1024 The whole script should look like this:}{\lang1024 
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\lang1024 import xbmc, xbmcgui
\par try: Emulating = xbmcgui.Emulating
\par except: Emulating = False
\par 
\par #get actioncodes from keymap.xml
\par ACTION_PREVIOUS_MENU = 10
\par 
\par class MyClass(xbmcgui.Window):
\par \tab def __init__(self):
\par \tab \tab if Emulating: xbmcgui.Window.__init__(self)
\par \tab \tab self.addControl(xbmcgui.ControlImage(0,0,720,480, "Q:\\\\scripts\\\\Tutorial\\\\background.gif"))
\par \tab \tab self.strActionInfo = xbmcgui.ControlLabel(100, 200, 200, 200, "", "font13", "0xFFFF00FF")
\par \tab \tab self.addControl(self.strActionInfo)
\par \tab \tab self.strActionInfo.setLabel("Push BACK to quit.")
\par \tab \tab self.outputLabel = xbmcgui.ControlLabel(100, 300, 200, 200, "", "font13", "0xFFFFFFFF")
\par \tab \tab self.addControl(self.outputLabel)
\par \tab \tab keyboard = xbmc.Keyboard("Entered Text")
\par \tab \tab keyboard.doModal()
\par \tab \tab if (keyboard.isConfirmed()):
\par \tab \tab \tab self.outputLabel.setLabel(keyboard.getText())
\par \tab \tab else:
\par \tab \tab \tab self.outputLabel.setLabel("User Canceled")
\par 
\par \tab def onAction(self, action):
\par \tab \tab if action == ACTION_PREVIOUS_MENU:
\par \tab \tab \tab self.close()
\par 
\par mydisplay = MyClass()
\par mydisplay.doModal()
\par }\pard \s15\li360\keep\widctlpar\adjustright {\lang1024 del mydisplay 
\par }\pard\plain \sb60\sa60\widctlpar\adjustright \lang2057\cgrid {\lang1024 Of course, even if a keyboard is simple, it provides all kinds of possibilities. It might be the clunkiest part of your script\emdash making a user type out a file\rquote 
s path on the XBox or enter a URL\emdash but the keyboard opens up limitless possibilities.
\par }\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 \clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr
\brdrs\brdrw10 \cltxlrtb \cellx10188\pard\plain \s18\sb200\keepn\widctlpar\intbl\adjustright \b\f1\cf11\lang2057\cgrid {\cf0\lang1024 Sidenote \endash  Bitplane\rquote s Py9 Dictionary
\par }\pard\plain \sb60\sa60\widctlpar\intbl\adjustright \lang2057\cgrid {\lang1024 Every virtual keyboard is going to have its drawbacks\emdash that\rquote s why so many people with modded XBoxes add USB ports to plug in }{\i\lang1024 real }{\lang1024 
keyboards. Even the full-time commercial developers can\rquote t do much to improve the problem, as you know if you\rquote ve played any commercial XBox game that requires you to enter a character name, or anything of the sort.
\par Bitplane of the XBMC forums is trying to help alleviate the problem some, by porting a concept originally designed for text messaging on cell phon
es. He has written a module that uses custom dictionaries to recreate the Nokia T9 style predictive text function.
\par Bitplane\rquote s module is designed to be incorporated into keyboard-dependent scripts. It\rquote s basic operation is this: when a user begins entering t
ext in the keyboard, the Py9 module will check the beginning of the word against a dictionary and try to predict what whole word the user is entering. If it guesses, right, you can press one button and it will finish the word for you; if it guesses wrong,
 you keep entering additional letters until it guesses right or you finish spelling out the word.
\par This can be an incredible time saver. Maybe it won\rquote t speed up zip code entry much, for scripts like MovieGuide and XBMC\rquote s Weather page, but it might just make things like Instant Messenger and XBox Email a }{\i\lang1024 lot}{\lang1024 
 easier and more efficient.
\par At the time I\rquote m writing this tutorial, the Py9 Dictionary tool has just been made public on the XBMC Forums, and is still in the early stages of development. If you\rquote re thinking a
bout using a keyboard extensively in your scripts, drop by the XBMC forums and do a search for this cool utility. It could turn a tedious chore into a quick and helpful little script.
\par Alexpoet\cell }\pard \widctlpar\intbl\adjustright {\lang1024 \row }\pard \sb60\sa60\widctlpar\adjustright {\lang1024 Now that you\rquote ve learned everything there is to know about interacting with the user, let\rquote 
s turn our attention back to the XBox itself. The next three segments will focus on getting information from XBMC, that you can either use in your script, or display to a curious user.
\par }\pard\plain \s18\sb200\keepn\widctlpar\adjustright \b\f1\cf11\lang2057\cgrid {\lang1024 Getting (and Using) the Current Screen Size
\par }\pard\plain \sb60\sa60\widctlpar\adjustright \lang2057\cgrid {\lang1024 The developers of XBMC have worked hard to make sure their program displays well on many different screen sizes. They\rquote 
ve been kind enough to provide us, as Python scripters, with the necessary tools to do the same. These are the xbmcgui functions getHeight() and getWidth().
\par Each of these functions does just what the name implies, returning an integer value equal to the number of pixels available on the current display. Some of the most common values are 720 x 480 (NTSC standard), }{1280 x 720, and 1920 x 1080.
\par To start with, we\rquote ll use a simple script that just finds the current display\rquote s values and tells them to the user. We can do all of this in the __init__ function, as there\rquote s no interaction necessary. Use the following lines:
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\lang1024 \tab \tab screenX = self.getWidth()
\par \tab \tab screenY = self.getHeight()
\par \tab \tab strscreenX = str(screenX)
\par \tab \tab strscreenY = str(screenY)
\par }\pard\plain \sb60\sa60\widctlpar\adjustright \lang2057\cgrid {You can see in the last two lines we converted the integer values to strings, so we can display them in Labels. Now just add a couple of Labels showing the information we\rquote ve gotten.

\par }{\b The whole script might look like this:
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\lang1024 import xbmc, xbmcgui
\par try: Emulating = xbmcgui.Emulating
\par except: Emulating = False
\par 
\par #get actioncodes from keymap.xml
\par ACTION_PREVIOUS_MENU = 10
\par 
\par class MyClass(xbmcgui.Window):
\par \tab def __init__(self):
\par \tab \tab if Emulating: xbmcgui.Window.__init__(self)
\par \tab \tab self.addControl(xbmcgui.ControlImage(0,0,720,480, "Q:\\\\scripts\\\\Tutorial\\\\background.gif"))
\par \tab \tab self.strActionInfo = xbmcgui.ControlLabel(100, 200, 200, 200, "", "font13", "0xFFFF00FF")
\par \tab \tab self.addControl(self.strActionInfo)
\par \tab \tab self.strActionInfo.setLabel("Push BACK to quit")
\par \tab \tab screenX = self.getWidth()
\par \tab \tab screenY = self.getHeight()
\par \tab \tab strscreenX = str(screenX)
\par \tab \tab strscreenY = str(screenY)
\par \tab \tab self.widthInfo = xbmcgui.ControlLabel(100, 300, 200, 200, "", "font13", "0xFFFFFFFF")
\par \tab \tab self.addControl(self. widthInfo)
\par \tab \tab self. widthInfo.setLabel("screen width is " + strscreenX)
\par \tab \tab self.heightInfo = xbmcgui.ControlLabel(100, 400, 200, 150, "", "font13", "0xFFFFFFFF")
\par \tab \tab self.addControl(self. heightInfo)
\par \tab \tab self. heightInfo.setLabel("screen height is " + strscreenY)
\par 
\par \tab def onAction(self, action):
\par \tab \tab if action == ACTION_PREVIOUS_MENU:
\par \tab \tab \tab self.close()
\par 
\par mydisplay = MyClass()
\par mydisplay.doModal()
\par del mydisplay}{\cf1\lang1024  
\par }\pard\plain \sb60\sa60\widctlpar\adjustright \lang2057\cgrid {\lang1024 Of course, telling a user how wide his screen is isn\rquote t going to help him out much. These functions are most useful when determining how you\rquote 
re going to layout the GUI. You might use them at the very beginning of your script, as something like:
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\lang1024 screenX = self.getWidth()
\par if screenX <= 720: 
\par }\pard \s15\fi360\li360\keep\keepn\widctlpar\adjustright {\lang1024 background = \ldblquote Q:\\\\scripts\\\\Tutorial\\\\small_background.gif\rdblquote 
\par standardFont = \ldblquote font12\rdblquote 
\par }\pard \s15\li360\keep\keepn\widctlpar\adjustright {\lang1024 elif screenX <= 1280:
\par }\pard \s15\fi360\li360\keep\keepn\widctlpar\adjustright {\lang1024 background = \ldblquote Q:\\\\scripts\\\\Tutorial\\\\medium_background.gif\rdblquote 
\par standardFont = \ldblquote font14\rdblquote 
\par }\pard \s15\li360\keep\keepn\widctlpar\adjustright {\lang1024 else:
\par }\pard \s15\fi360\li360\keep\keepn\widctlpar\adjustright {\lang1024 background = \ldblquote Q:\\\\scripts\\\\Tutorial\\\\large_background.gif\rdblquote 
\par }\pard \s15\fi360\li360\keep\widctlpar\adjustright {\lang1024 standardFont = \ldblquote font16\rdblquote 
\par }\pard\plain \sa60\widctlpar\adjustright \lang2057\cgrid {\lang1024 
Then you could include three different background pictures with your script for use on different TV sizes, and use those variables in your __init__ function to make sure you draw the right one on any given TV. This may seem like a lot of work, but trust
 us: it\rquote s worth it. 
\par You\rquote ll be surprised how many people are interested in downloading and using any script you make available, and }{\i\lang1024 then}{\lang1024  you\rquote 
ll be surprised how many different problems crop up when you have that many people testing out your stuff. Screen r
esolution differences are an easy problem to avoid (thanks to these two functions), so get in the habit of making dynamically-resizing scripts from the beginning, and you can spend your time fixing much more troublesome issues. :-)
\par }\pard\plain \s1\sa60\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \brdrl\brdrs\brdrw10\brsp80 \brdrb\brdrs\brdrw10\brsp20 \brdrr\brdrs\brdrw10\brsp80 \outlinelevel0\adjustright \b\f1\lang1024\cgrid {Sidenote \endash  Background Sk
ins and Bitplane's XML-Based Skin Reader
\par }\pard\plain \sa60\widctlpar\brdrt\brdrs\brdrw10\brsp20 \brdrl\brdrs\brdrw10\brsp80 \brdrb\brdrs\brdrw10\brsp20 \brdrr\brdrs\brdrw10\brsp80 \adjustright \lang2057\cgrid {\lang1024 Although this document is focusing on how you }{\i\lang1024 write}{
\lang1024  scripts--specifically the Python skills and XBMC libraries needed to do that--there's more that goes into making a really useful script than just writing it out. O
ne of the major tools I use in developing scripts is the background skin (like the one you see every time you run "display.py"). 
\par Drawing a backgroudn skin allows you to draw stationary graphical elements }{\i\lang1024 behind}{\lang1024  your GUI that will visually define the regions of the widgets you draw }{\i\lang1024 in}{\lang1024 
 your GUI. In other words...it can be a shortcut. Background skins are used to make scripts more attractive in appearance, but also to save time defining dialogs and scripting out widget borders.
\par If you're just starting out in scripting, you probably won't need to use background skins extensively until you get to more advanced scripts, but I wanted to mention them here, briefly, just so you could keep the possibility in mind.
\par One useful utility for building and organizing backgr
ound skins is the XML-based Skin Reader developed by Bitplane. It comes attached to his IRC-Client script, and I encourage you to drop by the XBMC forums or the Downloads page linked at the end of this document, and get a copy of it. The Skin Reader comes
 with very helpful documentation included, so I'm not going to go into detail here on its use, but consider it as a possible aid when you start adding complex backgrounds to your scripts.
\par Alexpoet
\par }\pard\plain \s18\sb100\keepn\widctlpar\adjustright \b\f1\cf11\lang2057\cgrid {\lang1024 Getting the Current Skin Directory and Localization}{\cf1\lang1024 
\par }\pard\plain \sb60\widctlpar\adjustright \lang2057\cgrid {\lang1024 
Another way you can build flexibility into your scripts is by writing them to interact smoothly with international users. Again, just like the screen sizes, the xbmcgui library provides us with the tools to find out }{\i\lang1024 how }{\lang1024 
the user is running his XBox, so we can try to make our scripts behave the same way.
\par This information is found using the xbmc.getLocalizedString() function. It reads information from the user\rquote s XML language file and passes it back to your script. The code will look something like this:
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\lang1024 \tab \tab localtxt1 = xbmc.getLocalizedString(10000)
\par \tab \tab localtxt2 = xbmc.getLocalizedString(10004)
\par }\pard\plain \sb60\widctlpar\adjustright \lang2057\cgrid {\lang1024 You can also get certain specific information, like the XBMC skin currently in use:
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\lang1024 \tab \tab myskin = xbmc.getSkinDir()
\par }\pard\plain \sb60\widctlpar\adjustright \lang2057\cgrid {\lang1024 This information can be important, because different skins have different font sizes, different graphics available, and different screen placement of buttons and other GUI items.
\par Just like the screen size above, this information is really only useful when you build scripts that will react to their environment, displaying properly no matter whose XBox they\rquote 
re running on. It would take too long to explain all the ways these items can be put to use, though, so we\rquote re just going to show you how to get the information, and for now (just as an example), we\rquote ll also display it on the screen.
\par }\pard \sb60\sa60\widctlpar\adjustright {\lang1024 Now, you already know all about getting and displaying information during an __init__ function, so this time let\rquote s do the same sort of thing in a different way. What we\rquote ll do is, from }{
\i\lang1024 outside}{\lang1024  the MyClass instance, we\rquote ll call a function }{\i\lang1024 inside}{
 the class that makes the GUI draw some text on the screen. The way you call a function within a class is by typing the class name first, then a period, then the regular function call, like this:
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {mydisplay.localInfo()
\par }\pard\plain \sb60\sa60\widctlpar\adjustright \lang2057\cgrid {We\rquote ll add that line to the bottom of our script, after creating the class (}{\f1\fs20\cf2 mydisplay = MyClass()}{), but before we ever tell it to show up on the screen (}{\f1\fs20\cf2 
mydisplay.doModal()}{). That way the class will be created, the __init__ will run (and will only make }{\i one}{ Label to appear on the screen), and then }{\i after}{ that the localInfo() function will run, drawing two additional Labels. }{\i Then}{
 the doModal call will make the screen appear, showing us all thee Labels.
\par Does that make sense? It doesn\rquote t }{\i have}{ to\emdash we\rquote re here to learn how to get information languag
e information using xbmc.getLocalizedString. We just added this functionality so you can get a glimpse at another way to make Python do what you want it to do. You could always write this the same way you\rquote 
ve been doing, though, putting the information checks as well as the Label constructors directly in the  __init__ function.
\par So there\rquote s no reason to panic if all that talk before didn\rquote t make any sense. But you might go ahead and read through it one more time, just to see if you can gain anything from it. The more you learn about Python\emdash and }{\i all}{
 the ways you can make it work\emdash the better your final scripts will be.
\par }{\lang1024 Now, we\rquote ve already discussed our basic plan for the script, so let\rquote s put it into code. First, write a localInfo function within MyClass that gets two
 different text strings out of your XML language file and displays them in a single Label. Then add another label that tells us the name of your XBMC skin. Here\rquote s a copy of the function:
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\lang1024 \tab def localInfo(self):
\par \tab \tab localtxt1 = xbmc.getLocalizedString(10000)
\par \tab \tab localtxt2 = xbmc.getLocalizedString(10004)
\par \tab \tab self.strLanguageInfo = xbmcgui.ControlLabel(100, 300, 200, 200, "", "font13", "0xFFFFFFFF")
\par \tab \tab self.addControl(self.strLanguageInfo)
\par }{\expnd0\expndtw-4\lang1024 \tab \tab self.}{\lang1024 strLanguageInfo}{\expnd0\expndtw-4\lang1024 .setLabel(}{\lang1024 "}{\expnd0\expndtw-4\lang1024 Text using your xml language file: }{\lang1024 "}{\expnd0\expndtw-4\lang1024  + localtxt1 + }{
\lang1024 "}{\expnd0\expndtw-4\lang1024  , }{\lang1024 "}{\expnd0\expndtw-4\lang1024  + localtxt2)
\par }{\lang1024 \tab \tab myskin = xbmc.getSkinDir()
\par \tab \tab self.strSkinInfo = xbmcgui.ControlLabel(100, 400, 200, 150, "", "font13", "0xFFFFFFFF")
\par \tab \tab self.addControl(self.strSkinInfo)
\par \tab \tab self.strSkinInfo.setLabel("Your skin dir is : /skin/" + myskin)
\par }\pard\plain \sb60\sa60\widctlpar\adjustright \lang2057\cgrid {\lang1024 You can see we added \ldblquote /skin/\rdblquote  to our output on the SkinInfo Label. We did that because getSkinDir only returns the name of the skin\rquote 
s folder, not the path from the XBMC root installation. We know that XBMC skins are supposed to be stored in the \ldblquote /skin/\rdblquote  subfolder, though, so we add that to the output Label to make the information clearer to our users.
\par Now all that\rquote s left is to add the function call at the bottom of our script, like we described above. }{\b\lang1024 The whole script should look like this:}{\lang1024 
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\lang1024 import xbmc, xbmcgui
\par try: Emulating = xbmcgui.Emulating
\par except: Emulating = False
\par 
\par #get actioncodes from keymap.xml
\par ACTION_PREVIOUS_MENU = 10
\par 
\par class MyClass(xbmcgui.Window):
\par \tab def __init__(self):
\par \tab \tab if Emulating: xbmcgui.Window.__init__(self)
\par \tab \tab self.addControl(xbmcgui.ControlImage(0,0,720,480, "Q:\\\\scripts\\\\Tutorial\\\\background.gif"))
\par \tab \tab self.strActionInfo = xbmcgui.ControlLabel(100, 200, 200, 200, "", "font13", "0xFFFF00FF")
\par \tab \tab self.addControl(self.strActionInfo)
\par \tab \tab self.strActionInfo.setLabel("Push BACK to quit")
\par 
\par \tab def onAction(self, action):
\par \tab \tab if action == ACTION_PREVIOUS_MENU:
\par \tab \tab \tab self.close()
\par 
\par \tab def localInfo(self):
\par \tab \tab localtxt1 = xbmc.getLocalizedString(10000)
\par \tab \tab localtxt2 = xbmc.getLocalizedString(10004)
\par \tab \tab self.strActionInfo = xbmcgui.ControlLabel(100, 300, 200, 200, "", "font13", "0xFFFFFFFF")
\par \tab \tab self.addControl(self.strActionInfo)
\par }{\expnd0\expndtw-4\lang1024 \tab \tab self.strActionInfo.setLabel(}{\lang1024 "}{\expnd0\expndtw-4\lang1024 Text using your xml language file: }{\lang1024 "}{\expnd0\expndtw-4\lang1024  + localtxt1 + }{\lang1024 "}{\expnd0\expndtw-4\lang1024  , }{
\lang1024 "}{\expnd0\expndtw-4\lang1024  + localtxt2)
\par }{\lang1024 \tab \tab myskin = xbmc.getSkinDir()
\par \tab \tab self.strActionInfo = xbmcgui.ControlLabel(100, 400, 200, 150, "", "font13", "0xFFFFFFFF")
\par \tab \tab self.addControl(self.strActionInfo)
\par \tab \tab self.strActionInfo.setLabel("Your skin dir is: /skin/" + myskin)
\par 
\par mydisplay = MyClass()
\par mydisplay.localInfo()
\par mydisplay.doModal()
\par del mydisplay}{\cf1\lang1024  
\par }\pard\plain \sb60\widctlpar\adjustright \lang2057\cgrid {\lang1024 When you test this on your XBox, you should see the \ldblquote Text using your XML language file:\rdblquote 
 Label and then two words shown in your language of choice. And the Label at the bottom should accurately display the script you\rquote re currently using.
\par }{\expnd0\expndtw-2\lang1024 It\rquote s easy to test the second one; just change your skin and then run the script again (at the time I\rquote m writing this, apparently only Symbol and Project Mayhem will run scripts). You\rquote 
d have to be brave (or bilingual) to test the other, but I managed it. Go into your XBMC settings, change the language, and then reboot if necessary. Now go into your scripts folder (I had to do it by memory, but I\rquote ve spent a }{
\i\expnd0\expndtw-2\lang1024 lot}{\expnd0\expndtw-2\lang1024  of time launching scripts so it wasn\rquote t hard), run display.py, and you\rquote ll see the same words in the new language! 
\par }{\lang1024 To get the most out of this function,  you\rquote ll need to learn the Language file, and which words and phrases are available across languages. Because XBMC is set up like this, it\rquote s }{\i\lang1024 possible}{
 to write one script that will work smoothly in multiple language\'85but it\rquote s a lot of work. You\rquote 
ll have to decide just how much you want to support international versions of your scripts. At least now you know how to use the tools, in case you do decide to put in the effort.
\par }\pard\plain \s18\sb200\keepn\widctlpar\adjustright \b\f1\cf11\lang2057\cgrid {\expnd0\expndtw-2\lang1024 Getting Language, IP Address, DVD State, Available Memory, and CPU Temperature
\par }\pard\plain \sb60\sa60\widctlpar\adjustright \lang2057\cgrid {\lang1024 These functions were my first attempt to extend the XBMC Python library and I\rquote 
m pretty proud of the result. You can use getLanguage, getIPAddress, getDVDState, getFreeMem, and getCpuTemp to access these data (all of which provide popular information to display on skins).
\par }\pard \sb60\widctlpar\adjustright {\lang1024 Even more useful, this will show you }{\i\lang1024 how}{\lang1024  xbmc is asked for information, and how it provides answers. We can only assume that the devs will continue to provide us with more functions, 
and access to more information, so learn these five functions, and you\rquote ll already be familiar with the basic pattern that will }{\i\lang1024 probably }{\lang1024 be used for similar kinds of functions in the future.
\par }\pard \sb60\sa60\widctlpar\adjustright {\expnd0\expndtw-4\lang1024 The script is very similar to our last one, but we\rquote re changing the information shown in the localInfo function. Because there\rquote s only really one change (and because you
\rquote re probably much better at reading through Python scripts by this point), this time I\rquote m just going to post the whole script at once. }{\b\expnd0\expndtw-4\lang1024 It should look like this:}{\expnd0\expndtw-4\lang1024 
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\lang1024 import xbmc, xbmcgui
\par try: Emulating = xbmcgui.Emulating
\par except: Emulating = False
\par 
\par #get actioncodes from keymap.xml
\par ACTION_PREVIOUS_MENU = 10
\par 
\par class MyClass(xbmcgui.Window):
\par \tab def __init__(self):
\par \tab \tab if Emulating: xbmcgui.Window.__init__(self)
\par \tab \tab self.addControl(xbmcgui.ControlImage(0,0,720,480, "Q:\\\\scripts\\\\Tutorial\\\\background.gif"))
\par \tab \tab self.strActionInfo = xbmcgui.ControlLabel(100, 200, 200, 200, "", "font13", "0xFFFF00FF")
\par \tab \tab self.addControl(self.strActionInfo)
\par \tab \tab self.strActionInfo.setLabel("Push BACK to quit")
\par 
\par \tab def onAction(self, action):
\par \tab \tab if action == ACTION_PREVIOUS_MENU:
\par \tab \tab \tab self.close()
\par 
\par \tab def localInfo(self):
\par \tab \tab infoLanguage = xbmc.getLanguage()
\par \tab \tab self.strLanguage = xbmcgui.ControlLabel(100, 150, 200, 200, "", "font13", "0xFFFFFFFF")
\par \tab \tab self.addControl(self.strLanguage)
\par \tab \tab self.strLanguage.setLabel("Your language is: " + infoLanguage)
\par \tab \tab infoIP = xbmc.getIPAddress()
\par \tab \tab self.strIPAddress = xbmcgui.ControlLabel(100, 250, 200, 200, "", "font13", "0xFFFFFFFF")
\par \tab \tab self.addControl(self.strIPAddress)
\par \tab \tab self.strIPAddress.setLabel("Your IP adress is: " + infoIP)
\par \tab \tab infoDVD = xbmc.getDVDState()
\par \tab \tab self.strDVDState = xbmcgui.ControlLabel(100, 300, 200, 200, "", "font13", "0xFFFFFFFF")
\par \tab \tab self.addControl(self.strDVDState)
\par \tab \tab dvdstate = ""
\par \tab \tab if (infoDVD == 1):
\par \tab \tab \tab dvdstate = "DRIVE_NOT_READY"
\par \tab \tab if (infoDVD == 16):
\par \tab \tab \tab dvdstate = "TRAY_OPEN"
\par \tab \tab if (infoDVD == 64):
\par \tab \tab \tab dvdstate = "TRAY_CLOSED_NO_MEDIA"
\par \tab \tab if (infoDVD == 96):
\par \tab \tab \tab dvdstate = "TRAY_CLOSED_MEDIA_PRESENT"
\par \tab \tab self.strDVDState.setLabel("DVD state: " + dvdstate )
\par \tab \tab infoMemory = xbmc.getFreeMem()
\par \tab \tab self.strMemory = xbmcgui.ControlLabel(100, 350, 200, 150, "", "font13", "0xFFFFFFFF")
\par \tab \tab self.addControl(self.strMemory)
\par \tab \tab self.strMemory.setLabel("Available memory: " + str(infoMemory) + " MB")
\par \tab \tab infoTemp = xbmc.getCpuTemp()
\par \tab \tab self.strTemp = xbmcgui.ControlLabel(100, 400, 200, 100, "", "font13", "0xFFFFFFFF")
\par \tab \tab self.addControl(self.strTemp)
\par \tab \tab self.strTemp.setLabel("CPU Temp: " + str(infoTemp) )
\par 
\par mydisplay = MyClass()
\par mydisplay.localInfo()
\par mydisplay.doModal()
\par }\pard \s15\li360\sa180\keep\keepn\widctlpar\adjustright {\lang1024 del mydisplay
\par }\pard\plain \s18\sb200\keepn\widctlpar\adjustright \b\f1\cf11\lang2057\cgrid {\lang1024 Creating a Child Window}{
\par }\pard\plain \sb60\sa60\widctlpar\adjustright \lang2057\cgrid {\lang1024 Now we enter our final lesson on GUIs, and I\rquote ve saved it this long because it\rquote s one that looks pretty complicated. It\rquote s really not very hard, and it\rquote 
s all stuff that you know how to do by now, but it might seem tricky to you if you\rquote re not a programmer.
\par Now, any of you who }{\i\lang1024 are}{\lang1024  programmers will have pretty much figured this out already, and this segment won\rquote t be any kind of a challenge. Read through it, say to yourself, \ldblquote Oh, yeah, that would work,\rdblquote 
 and then do the same with the next segment and you\rquote re done.
\par But, as I said at the start, I\rquote m not writing this for the experienced programmers, I\rquote m writing it for the beginners. So we\rquote ll keep it simple.
\par What we\rquote re going to do now is start a script that then creates a new window, which will pop up above the main display window. It will hang around for a while (until you press \ldblquote B\rdblquote 
), and then go away and leave the main display window there. This is called creating a \ldblquote child window\rdblquote  (where the \ldblquote parent window\rdblquote  is the main, original disp
lay. Child windows can be very helpful when you have a lot of information to display, and only so much screen space to show it on.
\par Essentially, a child window is the same thing as a dialog, except that it\rquote s raw (that is, you have to tell it what to contain) whereas a dialog is pre-defined to only contain certain things. Also, it gives you a }{\i\lang1024 lot}{\lang1024 
 more room.
\par So how do we build a child window? The same way we make a main window: by declaring a separate class, calling the class, and then using the doModal command.
\par First let\rquote s do some renaming. Replace MyClass with MainClass, because now there\rquote s going to be more than one. :-)
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\lang1024 class MainClass(xbmcgui.Window):
\par \tab def __init__(self):
\par \tab \tab if Emulating: xbmcgui.Window.__init__(self)
\par }\pard\plain \sb60\sa60\widctlpar\adjustright \lang2057\cgrid {\lang1024 Then go on with your __init__ as normal. Change the strActionInfo Label to tell the user the new rules: Push \ldblquote Back\rdblquote  to quit, or \ldblquote A\rdblquote 
 to open another window. Let\rquote s also throw in another Label just to let the user know that the window he\rquote s looking at is the parent (or main) window.
\par Now we\rquote ll modify onAction to handle the \ldblquote A\rdblquote  button. Add these three lines:
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\lang1024 \tab \tab if action == ACTION_SELECT_ITEM:
\par \tab \tab \tab popup = ChildClass()
\par \tab \tab \tab popup.doModal()
\par \tab \tab \tab del popup
\par }\pard\plain \sb60\sa60\widctlpar\adjustright \lang2057\cgrid {\lang1024 And }{\i\lang1024 that}{\lang1024  should look very familiar. It\rquote s the same three lines you have had at the bottom of almost every script, although we\rquote 
ve changed the variable name, and here we\rquote re calling a different class (but one that does almost exactly the same thing).
\par Can you guess what that class is going to look like? All we want it to do is tell the user to push \ldblquote Back\rdblquote  to get ri
d of this window, and show another label making sure you know that this is the child window. Oh, and have it go away when you push \ldblquote Back\rdblquote . That\rquote s }{\i\lang1024 all}{\lang1024  stuff you\rquote 
ve known how to do ever since page four. Try writing out the child class yourself. I\rquote ll give you the declaration line (which should be all the way over to the left of the page):
\par }\pard\plain \s15\li360\keep\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\lang1024 class ChildClass(xbmcgui.Window):
\par }\pard\plain \sb60\sa60\widctlpar\adjustright \lang2057\cgrid {\lang1024 And the rest you know. Unless this all seems painfully obvious to you, I encourage you to try to get this script working on your own. It wouldn\rquote 
t be fair to leave you entirely in the dark, though. }{\b\lang1024 So, when you\rquote re done, the whole script should look like this:}{\lang1024 
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\lang1024 import xbmc, xbmcgui
\par try: Emulating = xbmcgui.Emulating
\par except: Emulating = False
\par 
\par #get actioncodes from keymap.xml
\par ACTION_PREVIOUS_MENU = 10
\par ACTION_SELECT_ITEM = 7
\par 
\par class MainClass(xbmcgui.Window):
\par \tab def __init__(self):
\par \tab \tab if Emulating: xbmcgui.Window.__init__(self)
\par \tab \tab self.addControl(xbmcgui.ControlImage(0,0,720,480, "Q:\\\\scripts\\\\Tutorial\\\\background.gif"))
\par \tab \tab self.strActionInfo = xbmcgui.ControlLabel(100, 200, 200, 200, "", "font13", "0xFFFF00FF")
\par \tab \tab self.addControl(self.strActionInfo)
\par \tab \tab self.strActionInfo.setLabel("Push BACK to quit, or A to open another window.")
\par \tab \tab self.strActionInfo = xbmcgui.ControlLabel(300, 300, 200, 200, "", "font13", "0xFFFFFFFF")
\par \tab \tab self.addControl(self.strActionInfo)
\par \tab \tab self.strActionInfo.setLabel("This is the first window")
\par 
\par \tab def onAction(self, action):
\par \tab \tab if action == ACTION_PREVIOUS_MENU:
\par \tab \tab \tab self.close()
\par \tab \tab if action == ACTION_SELECT_ITEM:
\par \tab \tab \tab popup = ChildClass()
\par \tab \tab \tab popup.doModal()
\par \tab \tab \tab del popup
\par 
\par class ChildClass(xbmcgui.Window):
\par \tab def __init__(self):
\par \tab \tab if Emulating: xbmcgui.Window.__init__(self)
\par \tab \tab self.addControl(xbmcgui.ControlImage(0,0,720,480, "Q:\\\\scripts\\\\Tutorial\\\\background.gif"))
\par \tab \tab self.strActionInfo = xbmcgui.ControlLabel(100, 200, 200, 200, "", "font13", "0xFFFF00FF")
\par \tab \tab self.addControl(self.strActionInfo)
\par \tab \tab self.strActionInfo.setLabel("Push BACK to return to the first window")
\par \tab \tab self.strActionInfo = xbmcgui.ControlLabel(300, 300, 200, 200, "", "font13", "0xFFFFFF99")
\par \tab \tab self.addControl(self.strActionInfo)
\par \tab \tab self.strActionInfo.setLabel("This is the child window")
\par 
\par \tab def onAction(self, action):
\par \tab \tab if action == ACTION_PREVIOUS_MENU:
\par \tab \tab \tab self.close()
\par 
\par mydisplay = MainClass()
\par mydisplay.doModal()
\par del mydisplay
\par }\pard\plain \sb60\sa60\widctlpar\adjustright \lang2057\cgrid {\lang1024 That\rquote 
s it. Run it on your XBox and see what it does. At this point, you know everything it takes to make an interactive Python script for your XBox. You can control it, you can access information on the XBox and you know all about how to
 provide that information to the user. Of course, so far everything we\rquote ve talked about is how to use the XBMC libraries. But those libraries only exist to allow us to do }{\i\lang1024 other }{\lang1024 things\emdash 
cooler things. In the final segment we\rquote ll just touch on how you\rquote ll go about putting this information to }{\i\lang1024 use}{\lang1024 .
\par }\pard\plain \s18\sb200\keepn\widctlpar\adjustright \b\f1\cf11\lang2057\cgrid {\lang1024 Using Some Handy non-XBMC Functions}{\cf1\lang1024 
\par }\pard\plain \widctlpar\adjustright \lang2057\cgrid {\lang1024 Now, it\rquote s up to you to come up with the ideas and figure out how to implement them. One very good way to do that is to look through all the other scripts available and see what kinds o
f things others are doing. You can also }{\i\lang1024 read}{\lang1024  through any scripts that are available, to see how someone else solved a problem that\rquote s bugging you. So the learning material certainly doesn\rquote 
t stop at the end of this tutorial.
\par }\pard \sb60\widctlpar\adjustright {\lang1024 However, to get you started, here\rquote s an example of how you could apply the XBMC libraries to write a Python script that would }{\i\lang1024 do}{\lang1024 
 something. Specifically, it downloads a file through HTTP. [Editor\rquote s note: This is an unbelievably useful little function\emdash I\rquote ve copied the logic of it into at least three of my own projects. So pay attention!]
\par We\rquote ll use a special pair of Python methods\emdash Try and Except, which you've seen used before with all our "Emulating = " lines\emdash which work together to test if something can be done. First it tries the instructions
 in the try block. If those work, the script keeps running. If any of them break, for any reason, the except block allows the script to keep running (instead of throwing an error and crashing), but of course it fails to accomplish whatever it was trying. 
You can read the Python documentation for more details.
\par }\pard\plain \s15\li360\keep\keepn\widctlpar\adjustright \f1\fs20\cf2\lang2057\cgrid {\lang1024 import xbmc, xbmcgui, urllib
\par try: Emulating = xbmcgui.Emulating
\par except: Emulating = False
\par 
\par #get actioncodes from keymap.xml
\par ACTION_PREVIOUS_MENU = 10
\par ACTION_SELECT_ITEM = 7
\par 
\par class MyClass(xbmcgui.Window):
\par \tab def __init__(self):
\par \tab \tab if Emulating: xbmcgui.Window.__init__(self)
\par \tab \tab self.addControl(xbmcgui.ControlImage(0,0,720,480, "Q:\\\\scripts\\\\Tutorial\\\\background.gif"))
\par \tab \tab self.strActionInfo = xbmcgui.ControlLabel(100, 200, 200, 200, "", "font13", "0xFFFF00FF")
\par \tab \tab self.addControl(self.strActionInfo)
\par \tab \tab self.strActionInfo.setLabel("Push BACK to quit - A to download")
\par 
\par \tab def onAction(self, action):
\par \tab \tab if action == ACTION_PREVIOUS_MENU:
\par \tab \tab \tab self.close()
\par \tab \tab if action == ACTION_SELECT_ITEM:
\par \tab \tab \tab webfile = "http://www.google.com/images/logo.gif"
\par \tab \tab \tab localfile = "Q:\\\\scripts\\\\logo.gif"
\par \tab \tab \tab self.downloadURL(webfile,localfile)
\par 
\par \tab def downloadURL(self,source, destination):        
\par \tab \tab try:
\par \tab \tab \tab loc = urllib.URLopener()
\par \tab \tab \tab loc.retrieve(source, destination)
\par \tab \tab \tab self.message("Download successful!")
\par \tab \tab except:
\par \tab \tab \tab self.message("Download failed. Check your internet connection and try again later.")
\par 
\par \tab def message(self, messageText):
\par \tab \tab dialog = xbmcgui.Dialog()
\par \tab \tab dialog.ok(" My message title", messageText)
\par 
\par mydisplay = MyClass()
\par mydisplay.doModal()
\par }\pard \s15\li360\keep\widctlpar\adjustright {\lang1024 del mydisplay }{\cf1\lang1024 
\par }\pard\plain \sb60\sa60\widctlpar\adjustright \lang2057\cgrid {\lang1024 Try it out. If you get the message \ldblquote Download successful!\rdblquote  that means you now have a copy of Google\rquote 
s logo saved in your scripts folder. Go find it and delete it. :-) And }{\i\lang1024 that}{\lang1024  is a successful function. Of course, you can change the \ldblquote webfile\rdblquote  address to point to something else, or maybe write a \ldblquote 
select\rdblquote  dialog to choose among several items to download. Or incorporate the keyboard, and let the user type out a url.
\par You should know how to do all those things, and much more. At this point, we\rquote 
ve covered all the basics of programming Python scripts using the XBMC libraries. I hope this tutorial has been of some help to you. You can visit our websites (listed below) or drop by the XBMC Forums (also listed) to 
offer any encouragement or suggestions. We\rquote re always trying to improve the quality of this document, as well as the quality of any scripts we provide, so please provide any feedback through the appropriate forums.
\par Thank you for your interest,\line Alex (aka alx5962), and Alexpoet
\par 
\par }\pard \widctlpar\brdrb\brdrs\brdrw15\brsp20 \adjustright {\b\lang1024 Useful Links:
\par }\pard \widctlpar\adjustright {\lang1024 XBMC Forums: \tab \tab http://www.xboxmediaplayer.de/cgi-bin/forums/ikonboard.pl
\par XBox-Scene Forums:\tab \tab http://forums.xbox-scene.com/index.php?showforum=62
\par Scripts Download Page:\tab http://dwl.xboxmediacenter.de/
\par Alx5962\rquote s website:\tab \tab http://www.gueux.net/xbmc-scripts/index.html
\par }\pard \widctlpar\brdrb\brdrs\brdrw15\brsp20 \adjustright {\lang1024 Alexpoet\rquote s website:\tab \tab http://members.cox.net/alexpoet/downloads/
\par }\pard \sb60\sa60\widctlpar\adjustright {\lang1024 
\par }\pard \sb60\sa60\widctlpar\brdrb\brdrs\brdrw15\brsp20 \adjustright {\b\lang1024 You can also email us at these addresses:
\par }\pard \widctlpar\adjustright {\lang1024 Alx5962: \tab alx5962@yahoo.com
\par }\pard \widctlpar\brdrb\brdrs\brdrw15\brsp20 \adjustright {\lang1024 Alexpoet: \tab script_request@cox.net
\par }\pard \widctlpar\adjustright {\lang1024 
\par }}